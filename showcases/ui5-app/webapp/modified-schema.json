{
  "title": "SAP JSON schema for Web Application Manifest File",
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "type": "object",
  "required": ["_version", "sap.app", "sap.ui"],
  "additionalProperties": false,
  "properties": {
    "$schema": {
      "description": "The resource identifier for the JSON schema to be used. The value of this keyword MUST be a URI [RFC3986] (containing a scheme) and this URI MUST be normalized. The current schema MUST be valid against the meta-schema identified by this URI. If this URI identifies a retrievable resource, that resource SHOULD be of media type \"application/schema+json\".",
      "format": "uri",
      "type": "string"
    },
    "_version": {
      "description": "Represents Application Descriptor format version. It is managed by schema owner",
      "type": "string",
      "enum": [
        "1.1.0",
        "1.2.0",
        "1.3.0",
        "1.4.0",
        "1.5.0",
        "1.6.0",
        "1.7.0",
        "1.8.0",
        "1.9.0",
        "1.10.0",
        "1.11.0",
        "1.12.0",
        "1.13.0",
        "1.14.0",
        "1.15.0",
        "1.16.0",
        "1.17.0",
        "1.18.0",
        "1.19.0",
        "1.20.0",
        "1.21.0",
        "1.22.0",
        "1.23.0",
        "1.24.0",
        "1.25.0",
        "1.26.0",
        "1.27.0",
        "1.28.0",
        "1.29.0",
        "1.30.0",
        "1.31.0",
        "1.32.0",
        "1.33.0",
        "1.34.0",
        "1.35.0",
        "1.36.0",
        "1.37.0",
        "1.38.0",
        "1.39.0",
        "1.40.0",
        "1.41.0",
        "1.42.0",
        "1.43.0",
        "1.44.0",
        "1.45.0",
        "1.46.0",
        "1.47.0",
        "1.48.0",
        "1.49.0",
        "1.50.0",
        "1.51.0",
        "1.52.0",
        "1.53.0",
        "1.54.0",
        "1.55.0",
        "1.56.0",
        "1.57.0",
        "1.58.0",
        "1.59.0",
        "1.60.0",
        "1.61.0",
        "1.62.0",
        "1.63.0",
        "1.64.0",
        "1.65.0",
        "1.66.0",
        "1.67.2",
        "1.68.0",
        "1.69.0"
      ]
    },
    "start_url": {
      "description": "Represents the URL that the developer would prefer the user agent load when the user launches the web application",
      "type": "string"
    },
    "sap.app": {
      "title": "JSON schema for SAP.APP Namespace",
      "description": "Represents general application attributes",
      "type": "object",
      "additionalProperties": false,
      "required": ["id", "type", "title", "applicationVersion"],
      "properties": {
        "_version": {
          "description": "Application attributes format version. It is managed by namespace owner",
          "type": "string",
          "enum": [
            "1.1.0",
            "1.2.0",
            "1.3.0",
            "1.4.0",
            "1.5.0",
            "1.6.0",
            "1.7.0",
            "1.8.0",
            "1.9.0",
            "1.10.0",
            "1.11.0",
            "1.12.0",
            "1.13.0",
            "1.14.0",
            "1.15.0",
            "1.16.0",
            "1.17.0",
            "1.18.0",
            "1.19.0",
            "1.20.0",
            "1.21.0"
          ]
        },
        "sourceTemplate": {
          "description": "Represents the template from which the app was generated",
          "type": "object",
          "required": ["id", "version"],
          "properties": {
            "id": {
              "description": "Represents id of the template from which the app was generated ",
              "type": "string"
            },
            "version": {
              "description": "Represents the version of the template from which the app was generated",
              "type": "string"
            },
            "toolsId": {
              "description": "Represents an Id generated by SAP Fiori tools",
              "type": "string"
            }
          }
        },
        "id": {
          "description": "Represents mandatory unique app identifier which must correspond to component 'id/namespace'",
          "$ref": "#/$defs/id_def"
        },
        "type": {
          "description": "Represents type of an application and can be application or component or library or card",
          "type": "string",
          "enum": ["application", "component", "library", "card"]
        },
        "i18n": {
          "default": "i18n/i18n.properties",
          "description": "Represents path inside the app to the properties file containing text symbols for the Descriptor or properties file specific settings (including supportedLocales, fallbackLocale, terminologies and enhanceWith)",
          "oneOf": [
            {
              "default": "i18n/i18n.properties",
              "type": "string"
            },
            {
              "type": "object",
              "required": ["bundleName"],
              "additionalProperties": false,
              "properties": {
                "bundleName": {
                  "description": "Represents the alternative for bundleUrl",
                  "type": "string"
                },
                "fallbackLocale": {
                  "description": "Represents the fallback locale",
                  "type": "string"
                },
                "supportedLocales": {
                  "description": "Represents the list of supported locales",
                  "type": "array"
                },
                "terminologies": {
                  "description": "Represents terminologies with additional properties files",
                  "type": "object",
                  "additionalProperties": false,
                  "patternProperties": {
                    "^[a-zA-Z0-9_\\-]*$": {
                      "$ref": "#/$defs/terminologySetting"
                    }
                  }
                },
                "enhanceWith": {
                  "description": "Represents enhancement of UI5 resource model with additional properties files",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/$defs/enhanceWithSetting"
                  }
                }
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "required": ["bundleUrl"],
              "properties": {
                "bundleUrl": {
                  "description": "Represents the URL for the resource bundle",
                  "type": "string"
                },
                "bundleUrlRelativeTo": {
                  "description": "Indicates whether url is relative to component (default) or manifest",
                  "type": "string",
                  "default": "component",
                  "enum": ["manifest", "component"]
                },
                "supportedLocales": {
                  "description": "Represents the list of supported locales",
                  "type": "array"
                },
                "fallbackLocale": {
                  "description": "Represents the fallback locale",
                  "type": "string"
                },
                "terminologies": {
                  "description": "Represents terminologies with additional properties files",
                  "type": "object",
                  "additionalProperties": false,
                  "patternProperties": {
                    "^[a-zA-Z0-9_\\-]*$": {
                      "$ref": "#/$defs/terminologySetting"
                    }
                  }
                },
                "enhanceWith": {
                  "description": "Represents enhancement of UI5 resource model with additional properties files",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/$defs/enhanceWithSetting"
                  }
                }
              }
            }
          ]
        },
        "applicationVersion": {
          "description": "Represents mandatory version of the app",
          "type": "object",
          "required": ["version"],
          "properties": {
            "version": {
              "$ref": "#/$defs/version"
            }
          }
        },
        "embeds": {
          "description": "Represents array of relative paths to the nested manifest.json's (mandatory if it contains nested 'manifest.json')",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "embeddedBy": {
          "description": "Represents relative path back to the manifest.json of an embedding component or library (mandatory for nested 'manifest.json')",
          "type": "string"
        },
        "title": {
          "description": "Represents a title (mandatory); to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
          "$ref": "#/$defs/i18n_key_string",
          "i18n": {
            "type": "XTIT",
            "comment": "Application title"
          }
        },
        "subTitle": {
          "description": "Represents a subtitle to the title; to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
          "$ref": "#/$defs/i18n_key_string",
          "i18n": {
            "type": "XTIT",
            "comment": "Application subtitle"
          }
        },
        "shortTitle": {
          "description": "Represents a shorter version of the title; to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
          "$ref": "#/$defs/i18n_key_string",
          "i18n": {
            "type": "XTIT",
            "comment": "Shorter version of the application title"
          }
        },
        "info": {
          "description": "Represents additional information to the title; to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
          "$ref": "#/$defs/i18n_key_string",
          "i18n": {
            "type": "YINF",
            "comment": "Additional information to the application title"
          }
        },
        "description": {
          "description": "Represents a description; to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
          "$ref": "#/$defs/i18n_key_string",
          "i18n": {
            "type": "YDES",
            "comment": "Application description"
          }
        },
        "tags": {
          "description": "Represents array of keywords",
          "type": "object",
          "additionalProperties": true,
          "required": ["keywords"],
          "properties": {
            "keywords": {
              "$ref": "#/$defs/tag"
            },
            "technicalAttributes": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[A-Z0-9_\\-\\/]+$"
              }
            }
          }
        },
        "ach": {
          "description": "Represents application component hierarchy",
          "type": "string",
          "pattern": "^([a-zA-Z0-9]{2,3})(-[a-zA-Z0-9]{1,6})*$"
        },
        "dataSources": {
          "description": "Represents used data sources with a unique key/alias",
          "type": "object",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-zA-Z0-9_\\.\\-]*$": {
              "$ref": "#/$defs/dataSource"
            }
          }
        },
        "cdsViews": {
          "description": "Represents array of directly used CDS views, which only to be added if directly used via INA protocol and not if used via OData service",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resources": {
          "description": "Represents reference to a file (naming convention is resources.json) which contains list with all resources which the app needs",
          "type": "string",
          "enum": ["resources.json"]
        },
        "destination": {
          "description": "Represents a system alias",
          "type": "object",
          "required": ["name"],
          "additionalProperties": false,
          "properties": {
            "name": {
              "description": "Represents an alias for the system",
              "type": "string"
            }
          }
        },
        "openSourceComponents": {
          "description": "Represents a collection of directly used open source libs (not when used via UI5 capsulation)",
          "type": "array",
          "items": {
            "$ref": "#/$defs/openSource"
          }
        },
        "provider": {
          "description": "Represents the name of the provider which owns the application",
          "type": "string",
          "enum": ["sfsf"]
        },
        "offline": {
          "description": "Represents indicator whether the app is running offline. Possible values are true or false (default)",
          "type": "boolean",
          "default": false
        },
        "crossNavigation": {
          "description": "Represents cross navigation for inbound and outbound targets",
          "type": "object",
          "required": ["inbounds"],
          "properties": {
            "scopes": {
              "description": "Represents scopes of a site",
              "type": "object",
              "additionalProperties": false,
              "patternProperties": {
                "^[a-zA-Z0-9_\\.\\-]+$": {
                  "description": "Represents unique id of the site",
                  "type": "object",
                  "required": ["value"],
                  "properties": {
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "inbounds": {
              "description": "Represents cross navigation for inbound target",
              "$ref": "#/$defs/inbound"
            },
            "outbounds": {
              "description": "Describes intents that can be triggered from the application to navigate",
              "$ref": "#/$defs/outbound"
            }
          }
        }
      },
      "$defs": {
        "parameter": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            }
          }
        }
      }
    },
    "sap.ui": {
      "title": "JSON schema for SAP.UI Namespace",
      "description": "Represents general ui attributes",
      "type": "object",
      "required": ["technology", "deviceTypes"],
      "properties": {
        "_version": {
          "description": "Represents UI attributes format version. It is managed by namespace owner",
          "type": "string",
          "enum": ["1.1.0", "1.2.0", "1.3.0", "1.4.0", "1.5.0"]
        },
        "technology": {
          "description": "Represents UI technology. The possible values are UI5 (default), WDA, NWBC, GUI, URL and WCF",
          "type": "string",
          "enum": ["UI5", "WDA", "NWBC", "GUI", "URL", "WCF"],
          "default": "UI5"
        },
        "icons": {
          "description": "Represents icons which used in application",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "icon": {
              "description": "Represents icon of the app",
              "type": "string"
            },
            "favIcon": {
              "description": "Represents ICO file to be used inside the browser and for desktop shortcuts",
              "type": "string"
            },
            "phone": {
              "description": "Represents 57x57 pixel version for non-retina iPhones",
              "type": "string"
            },
            "phone@2": {
              "description": "Represents 114x114 pixel version for non-retina iPhones",
              "type": "string"
            },
            "tablet": {
              "description": "Represents 72x72 pixel version for non-retina iPads",
              "type": "string"
            },
            "tablet@2": {
              "description": "Represents 144x144 pixel version for non-retina iPads",
              "type": "string"
            }
          }
        },
        "deviceTypes": {
          "description": "Represents device types on which application is running. Supported device types are desktop, tablet and phone",
          "allOf": [
            {
              "$ref": "#/$defs/deviceType"
            },
            {
              "required": ["desktop", "tablet", "phone"]
            }
          ]
        },
        "supportedThemes": {
          "description": "[Deprecated] Represents array of supported SAP themes such as sap_hcb, sap_bluecrystal",
          "deprecated": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fullWidth": {
          "description": "Indicates whether app should run in full screen mode: possible values: true or false ",
          "type": "boolean"
        }
      }
    },
    "sap.ui5": {
      "title": "JSON schema for SAP.UI5 Namespace",
      "description": "Represents sapui5 attributes",
      "allOf": [
        {
          "type": "object",
          "required": ["dependencies", "contentDensities"],
          "properties": {
            "_version": {
              "description": " Represents SAPUI5 attributes format version. It is managed by namespace owner",
              "type": "string",
              "enum": ["1.1.0", "1.2.0", "1.3.0", "1.4.0", "1.5.0", "1.6.0", "1.7.0", "1.8.0", "1.9.0", "1.10.0", "1.11.0", "1.12.0", "1.13.0", "1.14.0", "1.15.0", "1.16.0", "1.17.0", "1.18.0"]
            },
            "resources": {
              "description": "Represents paths to JavaScript/CSS resources that your app needs (app internal), formerly called '.includes'",
              "$ref": "#/$defs/resource"
            },
            "componentUsages": {
              "description": "Represents the explicit usage declaration for UI5 reuse components",
              "type": "object",
              "additionalProperties": false,
              "patternProperties": {
                "^[a-zA-Z0-9_\\.]*$": {
                  "$ref": "#/$defs/componentUsages"
                }
              }
            },
            "dependencies": {
              "description": "Represents external dependences such as libraries or components, that will be loaded by UI5 Core in the initialization phase of your Component and can be used after it",
              "type": "object",
              "additionalProperties": false,
              "required": ["minUI5Version"],
              "properties": {
                "minUI5Version": {
                  "description": "Represents the minimum version of SAPUI5 that your component requires. It is either a specific version or an array of versions where each major version can only be included once. If array contains more than one version and if version 1 is included it must be at least 1.120.x.",
                  "$ref": "#/$defs/minUI5Version"
                },
                "libs": {
                  "description": "Represents the id (namespace) of the libraries that should be loaded by UI5 Core to be used in your component",
                  "type": "object",
                  "additionalProperties": false,
                  "patternProperties": {
                    "^([a-z][a-z0-9]{0,39})(\\.[a-z][a-z0-9]{0,39})*$": {
                      "$ref": "#/$defs/lib"
                    }
                  }
                },
                "components": {
                  "description": "Represents the id (namespace) of the components that should be loaded by UI5 Core to be used in your component",
                  "type": "object",
                  "additionalProperties": false,
                  "patternProperties": {
                    "^([a-zA-Z_$][a-zA-Z0-9_$]{0,39}\\.)*([a-zA-Z_$][a-zA-Z0-9_$]{0,39})$": {
                      "$ref": "#/$defs/component"
                    }
                  }
                }
              }
            },
            "models": {
              "description": "Represents models which should be created/destroyed with the life-cycle of the component",
              "type": "object",
              "additionalProperties": false,
              "patternProperties": {
                "^[a-zA-Z0-9_\\.\\-\\|@]*$": {
                  "$ref": "#/$defs/model"
                }
              }
            },
            "resourceRoots": {
              "description": "Represents relative path to the resource. Only relative path allowed, no '../' ",
              "type": "object",
              "additionalProperties": false,
              "patternProperties": {
                "^[a-zA-Z0-9_\\.\\-]*$": {
                  "$ref": "#/$defs/resourceRoot"
                }
              }
            },
            "handleValidation": {
              "description": "Represents the usage of validation handling by MessageManager for this component (enable/disable)",
              "type": "boolean",
              "default": false
            },
            "config": {
              "description": "Represents the static configuration for components",
              "type": "object",
              "additionalProperties": false,
              "patternProperties": {
                "[\\s\\S]*": {
                  "$ref": "#/$defs/config"
                }
              }
            },
            "extends": {
              "description": "Represents the extension of an additional component",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "component": {
                  "description": "Represents the component name",
                  "$ref": "#/$defs/id_def"
                },
                "minVersion": {
                  "description": "Represents minimal version of the component",
                  "$ref": "#/$defs/version"
                },
                "extensions": {
                  "description": "Represents extensions of the component",
                  "type": "object"
                }
              }
            },
            "contentDensities": {
              "description": "Represents object with content density modes the app is supporting. Supported density modes are 'cozy' and 'compact'",
              "type": "object",
              "additionalProperties": false,
              "required": ["compact", "cozy"],
              "properties": {
                "compact": {
                  "description": "Represents indicator whether compact mode is supported",
                  "type": "boolean"
                },
                "cozy": {
                  "description": "Represents indicator whether cozy mode is supported",
                  "type": "boolean"
                }
              }
            },
            "componentName": {
              "description": "Represents a name of the UI5 component",
              "type": "string",
              "pattern": "^([a-zA-Z_$][a-zA-Z0-9_$]{0,39}\\.)*([a-zA-Z_$][a-zA-Z0-9_$]{0,39})$"
            },
            "autoPrefixId": {
              "description": "Enables the auto prefixing of IDs of ManagedObjects (e.g. Controls) which are created in context of the Component (e.g. createContent invocation)",
              "type": "boolean"
            },
            "appVariantId": {
              "description": "Represents the identifier of an application variant. The value will be calculated and should not be set manually ",
              "type": "string"
            },
            "appVariantIdHierarchy": {
              "description": "Represents array of appVariantId hierarchy with origin layer and version, calculated attribute and filled automatically during variant merge",
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "required": ["layer", "appVariantId", "version"],
                "properties": {
                  "layer": {
                    "description": "Represents origin layer of the app variant id",
                    "type": "string"
                  },
                  "appVariantId": {
                    "description": "Represents app variant id",
                    "type": "string"
                  },
                  "version": {
                    "description": "Represents version of the app variant id",
                    "type": "string"
                  }
                }
              }
            },
            "services": {
              "description": "Represents a list of the services ",
              "type": "object",
              "additionalProperties": false,
              "patternProperties": {
                "[\\s\\S]*": {
                  "$ref": "#/$defs/service"
                }
              }
            },
            "library": {
              "description": "Represents UI5 library specific properties",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "i18n": {
                  "description": "Setting to define i18n properties of a library. Can either be a boolean, string or object.",
                  "oneOf": [
                    {
                      "description": "Using a boolean indicates whether the library contains a i18n resource or not.",
                      "type": "boolean"
                    },
                    {
                      "description": "When using a string an alternative name for the i18n resource can be defined.",
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": ["bundleUrl"],
                      "properties": {
                        "bundleUrl": {
                          "description": "Represents the URL for the resource bundle",
                          "type": "string"
                        },
                        "supportedLocales": {
                          "description": "Represents the list of supported locales",
                          "type": "array"
                        },
                        "fallbackLocale": {
                          "description": "Represents the fallback locale",
                          "type": "string"
                        },
                        "terminologies": {
                          "description": "Represents terminologies with additional properties files",
                          "type": "object",
                          "additionalProperties": false,
                          "patternProperties": {
                            "^[a-zA-Z0-9_\\-]*$": {
                              "$ref": "#/$defs/terminologySetting"
                            }
                          }
                        },
                        "enhanceWith": {
                          "description": "Represents enhancement of UI5 resource bundle with additional properties files",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "$ref": "#/$defs/enhanceWithSetting"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": ["bundleName"],
                      "additionalProperties": false,
                      "properties": {
                        "bundleName": {
                          "description": "Represents the alternative for bundleUrl",
                          "type": "string"
                        },
                        "fallbackLocale": {
                          "description": "Represents the fallback locale",
                          "type": "string"
                        },
                        "supportedLocales": {
                          "description": "Represents the list of supported locales",
                          "type": "array"
                        },
                        "terminologies": {
                          "description": "Represents terminologies with additional properties files",
                          "type": "object",
                          "additionalProperties": false,
                          "patternProperties": {
                            "^[a-zA-Z0-9_\\-]*$": {
                              "$ref": "#/$defs/terminologySetting"
                            }
                          }
                        },
                        "enhanceWith": {
                          "description": "Represents enhancement of UI5 resource bundle with additional properties files",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "$ref": "#/$defs/enhanceWithSetting"
                          }
                        }
                      }
                    }
                  ]
                },
                "css": {
                  "description": "Flag whether the library contains a CSS file or not.",
                  "$ref": "#/$defs/booleanOrString"
                },
                "content": {
                  "description": "Represents the content of a library. Content are controls, elements, types and interfaces.",
                  "type": "object"
                }
              }
            },
            "commands": {
              "description": "Represents a list of UI5 shortcut commands",
              "type": "object",
              "additionalProperties": false,
              "patternProperties": {
                "^[A-Za-z_][A-Za-z0-9_\\-\\|@]+$": {
                  "$ref": "#/$defs/command"
                }
              }
            },
            "flexExtensionPointEnabled": {
              "description": "Represents an indicator whether app variant is flex extension point enabled",
              "type": "boolean",
              "default": false
            },
            "isCloudDevAdaptation": {
              "description": "Represents an indicator whether app is a cloud developer adaptation, filled automatically during build.",
              "type": "boolean",
              "default": false
            }
          }
        },
        {
          "oneOf": [
            {
              "type": "object",
              "required": ["flexEnabled"],
              "properties": {
                "flexEnabled": {
                  "description": "Represents an Indicator whether an app is flex enabled",
                  "type": "boolean",
                  "enum": [true]
                },
                "routing": {
                  "$ref": "#/$defs/routing_flexEnabled"
                },
                "rootView": {
                  "$ref": "#/$defs/rootView_def_flexEnabled"
                }
              }
            },
            {
              "type": "object",
              "properties": {
                "flexEnabled": {
                  "description": "Represents an Indicator whether an app is flex enabled",
                  "type": "boolean",
                  "enum": [false]
                },
                "routing": {
                  "$ref": "#/$defs/routing"
                },
                "rootView": {
                  "$ref": "#/$defs/rootView_def"
                }
              }
            }
          ]
        }
      ],
      "$defs": {
        "deviceType": {
          "type": "object",
          "description": "Represents device types on which the app is running",
          "additionalProperties": false,
          "properties": {
            "desktop": {
              "description": "Represents indicator whether desktop device is supported, default true",
              "type": "boolean"
            },
            "tablet": {
              "description": "Represents indicator whether tablet device is supported, default true",
              "type": "boolean"
            },
            "phone": {
              "description": "Represents indicator whether phone device is supported, default true",
              "type": "boolean"
            }
          }
        }
      }
    },
    "sap.platform.abap": {
      "title": "JSON schema for SAP.PLATFORM.ABAP Namespace",
      "description": "Represents ABAP platform specific attributes",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "_version": {
          "description": "Represents attributes format version. It is managed by namespace owner",
          "type": "string",
          "enum": ["1.1.0", "1.2.0"]
        },
        "uri": {
          "description": "Represents the uri of the app in the ABAP system",
          "type": "string"
        },
        "uriNwbc": {
          "description": "Represents the alternative uri of the app in the ABAP system for starting the application",
          "type": "string"
        }
      }
    },
    "sap.platform.hcp": {
      "title": "JSON schema for SAP.PLATFORM.HCP Namespace",
      "description": "Represents HANA Cloud Platform platform specific attributes",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "_version": {
          "description": "Represents attributes format version. It is managed by namespace owner",
          "type": "string",
          "enum": ["1.1.0", "1.2.0", "1.3.0"]
        },
        "uri": {
          "description": "Represents the uri of the app in the HANA Cloud Platform",
          "type": "string"
        },
        "uriNwbc": {
          "description": "Represents the alternative uri of the app in the ABAP system for starting the application",
          "type": "string"
        },
        "providerAccount": {
          "description": "Represents the provider account of the HTML5 application",
          "type": "string"
        },
        "appName": {
          "description": "Represents the HTML5 application name",
          "type": "string",
          "pattern": "^[a-z][a-z0-9]{0,29}$"
        },
        "appVersion": {
          "description": "Represents the version of the HTML5 application",
          "type": "string"
        },
        "multiVersionApp": {
          "description": "Indicates that HCP application is multi-version enabled",
          "type": "boolean"
        }
      }
    },
    "sap.platform.cf": {
      "title": "JSON schema for SAP.PLATFORM.CF Namespace",
      "description": "Represents CF(Cloud Foundry) platform specific attributes",
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "_version": {
          "description": "Represents attributes format version. It is managed by namespace owner",
          "type": "string",
          "enum": ["1.1.0", "1.2.0"]
        },
        "oAuthScopes": {
          "description": "Represents the authorization scope of the application",
          "type": "array",
          "items": {
            "type": "string"
          },
          "appHostId": {
            "description": "Application host id to which the HTML5 app belongs",
            "type": "string"
          },
          "changedOn": {
            "description": "Changed on time stamp of the HTML5 app",
            "type": "string"
          },
          "appName": {
            "description": "Represents the HTML5 application name",
            "type": "string",
            "pattern": "^[a-z][a-z0-9]{0,29}$"
          },
          "appVersion": {
            "description": "Represents the version of the HTML5 application",
            "type": "string"
          },
          "multiVersionApp": {
            "description": "Indicates wether an HTML5 application is multi-version enabled",
            "type": "boolean"
          }
        }
      }
    },
    "sap.platform.mobilecards": {
      "title": "JSON schema for SAP.PLATFORM.MOBILECARDS Namespace",
      "description": "Represents Mobile Cards platform specific attributes",
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "_version": {
          "description": "Represents attributes format version. It is managed by namespace owner",
          "type": "string",
          "enum": ["1.0.0"]
        },
        "compatible": {
          "description": "Represents the compatibility of this app with the Mobile Cards platform.",
          "type": "boolean"
        }
      }
    },
    "sap.fiori": {
      "title": "JSON schema for SAP.FIORI Namespace",
      "description": "Represents SAP Fiori  specific attributes",
      "type": "object",
      "required": ["registrationIds", "archeType"],
      "additionalProperties": false,
      "properties": {
        "_version": {
          "description": "Represents attributes format version. It is managed by namespace owner",
          "type": "string",
          "enum": ["1.1.0", "1.2.0", "1.3.0"]
        },
        "registrationIds": {
          "description": "Represents array of registration ids, i.e. for Fiori apps fiori id(s)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "archeType": {
          "description": "Represents architecture type of an application. The supported types are transactional or analytical or factsheet or reusecomponent or fpmwebdynpro or designstudio",
          "type": "string",
          "enum": ["transactional", "analytical", "factsheet", "reusecomponent", "fpmwebdynpro", "designstudio"]
        },
        "abstract": {
          "description": "Indicator that app is an abstract (generic) app which may not be used directly, but needs to be specialized in the SAP Fiori launchpad content",
          "type": "boolean"
        },
        "cloudDevAdaptationStatus": {
          "description": "Represents the release status for the developer adaptation in the cloud (relevant for SAP internal only). The supported types are released, deprecated, obsolete, no value means not released",
          "type": "string",
          "enum": ["released", "deprecated", "obsolete"]
        }
      }
    },
    "sap.ui.generic.app": {
      "title": "JSON schema for SAP.UI.GENERIC.APP Namespace",
      "description": "Represents GENERIC APP specific attributes",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "_version": {
          "type": "string",
          "enum": ["1.1.0", "1.2.0", "1.3.0", "1.4.0", "1.5.0", "1.6.0"]
        },
        "settings": {
          "description": "Represents global settings for the application controller",
          "$ref": "#/$defs/setting_def"
        },
        "pages": {
          "description": "Represents one ore more pages of an application. UI5 routing is created from the definitions in this section",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/pages_array"
              }
            },
            {
              "type": "object",
              "additionalProperties": false,
              "patternProperties": {
                "^[a-zA-Z0-9_\\.\\-]+[\\|]?[a-zA-Z0-9_\\.\\-]+$": {
                  "$ref": "#/$defs/pages_map"
                }
              }
            }
          ]
        }
      }
    },
    "sap.fe": {
      "title": "JSON schema for SAP.FE Namespace",
      "description": "Represents specific attributes for Fiori Elements ",
      "type": "object"
    },
    "sap.flp": {
      "title": "JSON schema for SAP.FLP Namespace",
      "description": "Represents FLP specific attributes",
      "type": "object",
      "required": ["type"],
      "additionalProperties": false,
      "properties": {
        "_version": {
          "description": "Represents attributes format version. It is managed by namespace owner",
          "type": "string",
          "enum": ["1.1.0", "1.2.0", "1.3.0"]
        },
        "tileSize": {
          "description": "Represents size of the tile",
          "type": "string",
          "enum": ["1x1", "1x2"]
        },
        "type": {
          "description": "Represents the type of FLP entry. It must be 'application' or 'tile' or 'plugin'",
          "type": "string",
          "enum": ["application", "tile", "plugin"]
        },
        "config": {
          "description": "Represents configuration parameters of the FLP entry",
          "type": "object",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-zA-Z0-9\\_\\.\\-]*$": {
              "description": "Represents the configuration key and values",
              "type": "object"
            }
          }
        },
        "origin": {
          "description": "Represents the original tile and target mapping which resulted in this app",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "tileId": {
              "description": "Represents the original tile which resulted in this app",
              "type": "string"
            },
            "targetMappingId": {
              "description": "Represents the original target mapping which resulted in this app",
              "type": "string"
            }
          }
        }
      }
    },
    "sap.ovp": {
      "title": "JSON schema for SAP.OVP Namespace",
      "description": "Represents OVP specific attributes",
      "type": "object",
      "required": ["cards"],
      "dependentRequired": {
        "globalFilterEntityType": ["globalFilterModel"]
      },
      "additionalProperties": false,
      "properties": {
        "_version": {
          "description": "Represents attributes format version. It is managed by namespace owner",
          "type": "string",
          "enum": ["1.1.0", "1.2.0", "1.3.0", "1.4.0", "1.5.0", "1.6.0", "1.7.0", "1.8.0", "1.9.0", "1.10.0", "1.11.0"]
        },
        "globalFilterModel": {
          "description": "Represents the name of global filter OData model, which  contains entities definition that are relevant for global filters",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_\\.\\-\\|@]*$"
        },
        "globalFilterEntityType": {
          "description": "Represents the entity to use as global filter in the smart filter bar control",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_\\.\\-\\|@]*$"
        },
        "globalFilterControlType": {
          "description": "Represents the control to be used for the filter bar",
          "type": "string",
          "default": "SmartFilterBar",
          "enum": ["MacroFilterBar", "SmartFilterBar"]
        },
        "globalFilterEntitySet": {
          "description": "Represents the entity set to use as global filter in the smart filter bar control",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_\\.\\-\\|@]*$"
        },
        "showBasicSearch": {
          "description": "Represents a switch to include basic search in the global filters",
          "type": "boolean",
          "default": false
        },
        "disableErrorPage": {
          "description": "Represents a switch to disable the error page shown on load of overview page when no data is retreived from the backend",
          "type": "boolean",
          "default": false
        },
        "smartVariantRequired": {
          "description": "Represents a switch to activate smart variant management in the global filters",
          "type": "boolean",
          "default": true
        },
        "bHeaderExpanded": {
          "description": "Represents a switch to show smart filter bar in expanded or collapsed mode",
          "type": "boolean",
          "default": false
        },
        "containerLayout": {
          "description": "Represents the layout of the card container",
          "type": "string",
          "default": "fixed",
          "enum": ["fixed", "resizable"]
        },
        "showDateInRelativeFormat": {
          "description": "Represents a switch to Enable or disable Relative or Normal date formating in ovp application",
          "type": "boolean",
          "default": true
        },
        "disableTableCardFlexibility": {
          "description": "Represents a switch to Enable or Disable the Flexibility of Table cards",
          "type": "boolean",
          "default": false
        },
        "enableLiveFilter": {
          "description": "Represents the switch to activate live update in the global filters, else manual update will be required",
          "type": "boolean",
          "default": true
        },
        "enableLazyRendering": {
          "description": "Enable loading of cards when they enter viewport",
          "type": "boolean",
          "default": false
        },
        "refreshStrategyOnAppRestore": {
          "description": "Represents the refresh strategies configured for OVP while coming back to the source app",
          "$ref": "#/$defs/refreshStrategies_prop_def"
        },
        "considerAnalyticalParameters": {
          "description": "Flag to enable/disable analytical parameter support for Smart filter bar",
          "type": "boolean",
          "default": false
        },
        "refreshIntervalInMinutes": {
          "description": "Time interval in minutes to auto refresh the card models",
          "type": "integer",
          "default": 1
        },
        "useDateRangeType": {
          "description": "Flag to enable/disable semantic date range control for Smart filter bar",
          "type": "boolean",
          "default": false
        },
        "chartSettings": {
          "description": "Represents the object to store analytical chart settings",
          "type": "object",
          "properties": {
            "showDataLabel": {
              "description": "Flag to enable data labels on analytical charts",
              "type": "boolean",
              "default": false
            }
          }
        },
        "filterSettings": {
          "description": "Represents the object to store filter bar configuration",
          "type": "object",
          "properties": {
            "dateSettings": {
              "description": "Represents the object to store date type filter fields configuration",
              "type": "object",
              "properties": {
                "useDateRange": {
                  "description": "Flag to enable DateTimeRange setting for date type filter fields with filter restriction interval",
                  "type": "boolean",
                  "default": false
                },
                "selectedValues": {
                  "description": "Represents the semantic date values selected for the date filter field",
                  "type": "string"
                },
                "exclude": {
                  "description": "Flag to exclude values from the date picker",
                  "type": "boolean",
                  "default": false
                },
                "fields": {
                  "description": "Represents the filter field definition for each field",
                  "type": "object",
                  "patternProperties": {
                    "^[a-zA-Z0-9_\\.\\-]*$": {
                      "$ref": "#/$defs/filterFieldName"
                    }
                  }
                }
              }
            }
          }
        },
        "dataLoadSettings": {
          "description": "Represents the object to define data loading behaviour for an overview page application",
          "type": "object",
          "properties": {
            "loadDataOnAppLaunch": {
              "description": "Data load behaviour options on application launch",
              "type": "string",
              "default": "always",
              "enum": ["always", "never", "ifAnyFilterExist"]
            }
          }
        },
        "cards": {
          "type": "object",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-zA-Z0-9_\\.\\-]+$": {
              "$ref": "#/$defs/card"
            }
          }
        },
        "resizableLayout": {
          "type": "object",
          "additionalProperties": false,
          "patternProperties": {
            "^cols_[0-9]+$": {
              "$ref": "#/$defs/resizableLayoutVariant"
            }
          }
        }
      }
    },
    "sap.insights": {
      "additionalProperties": false,
      "description": "Represents Insights attributes",
      "required": ["parentAppId", "cardType"],
      "properties": {
        "_version": {
          "type": "string",
          "enum": ["1.0.0", "1.1.0", "1.2.0", "1.3.0", "1.4.0", "1.5.0"]
        },
        "parentAppId": {
          "type": "string",
          "description": "Represents mandatory unique app identifier of the app containing self manifest."
        },
        "filterEntitySet": {
          "description": "Represents the entity to use as global filter in the filter bar control",
          "pattern": "^[a-zA-Z0-9_\\.\\-\\|@]*$",
          "type": "string"
        },
        "templateName": {
          "description": "Represents the template name, from where manifest is generated",
          "pattern": "^[a-zA-Z0-9_\\.\\-\\|@]*$",
          "type": "string"
        },
        "cardType": {
          "description": "Represents the environment type of Insights card",
          "type": "string",
          "enum": ["DT", "RT"]
        },
        "isDtCardCopy": {
          "description": "Represents the state of original or copied card",
          "type": "boolean",
          "default": false
        },
        "isDeletedForUser": {
          "description": "Represents the deleted state for a user",
          "type": "boolean",
          "default": false
        },
        "visible": {
          "description": "Represents the visibility type of Insights card",
          "type": "boolean",
          "default": true
        },
        "rank": {
          "description": "[Deprecated] Represents the display order of Insights card",
          "deprecated": true,
          "type": "integer"
        },
        "versions": {
          "description": "Represents UI5 and card generator middleware version.",
          "type": "object",
          "properties": {
            "ui5": {
              "description": "Represents the version of UI5 used to generate the card.",
              "type": "string"
            },
            "dtMiddleware": {
              "description": "Represents the version of design time card generator",
              "type": "string"
            }
          }
        },
        "ranking": {
          "description": "New property representing the display order of Insights card",
          "type": "string"
        },
        "allowedChartTypes": {
          "description": "Array of all supported chart type allowed for transformation.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "bar",
              "column",
              "line",
              "bullet",
              "vertical_bullet",
              "100_stacked_bar",
              "100_stacked_column",
              "waterfall",
              "horizontal_waterfall",
              "area",
              "radar",
              "combination",
              "stacked_bar",
              "stacked_column",
              "stacked_combination",
              "horizontal_stacked_combination",
              "pie",
              "donut",
              "dual_bar",
              "dual_column",
              "dual_line",
              "dual_stacked_bar",
              "dual_stacked_column",
              "dual_combination",
              "dual_horizontal_combination",
              "dual_stacked_combination",
              "dual_horizontal_stacked_combination",
              "100_dual_stacked_bar",
              "100_dual_stacked_column",
              "scatter",
              "heatmap",
              "timeseries_column",
              "timeseries_line",
              "timeseries_scatter",
              "timeseries_stacked_column",
              "timeseries_100_stacked_column",
              "timeseries_bullet",
              "timeseries_waterfall",
              "timeseries_stacked_combination"
            ]
          }
        }
      },
      "title": "JSON schema for SAP Insights Namespace",
      "type": "object"
    },
    "sap.wda": {
      "title": "JSON schema for SAP.WDA Namespace",
      "description": "Represents WDA specific attributes",
      "type": "object",
      "required": ["applicationId"],
      "additionalProperties": false,
      "properties": {
        "_version": {
          "description": "Represents attributes format version. It is managed by namespace owner",
          "type": "string",
          "enum": ["1.1.0", "1.2.0"]
        },
        "applicationId": {
          "description": "Represents ID of an application",
          "type": "string",
          "pattern": "^[a-zA-Z0-9\\/_]{1,30}$"
        },
        "configId": {
          "description": "Represents ID of an application configuration",
          "type": "string",
          "pattern": "^[a-zA-Z0-9\\/\\_]{1,32}$"
        },
        "flavorId": {
          "description": "Represents SAP Screen Personas Flavor ID",
          "type": "string",
          "pattern": "^[A-F0-9]{1,32}$"
        },
        "compatibilityMode": {
          "description": "Indicates that WebDynpro Application requires Compatibility Mode, while uses legacy shell services. Possible values are true or false (default)",
          "type": "boolean",
          "default": false
        }
      }
    },
    "sap.apf": {
      "title": "JSON schema for SAP.APF Namespace",
      "description": "Represents APF specific attributes",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "_version": {
          "description": "Represents attributes format version. It is managed by namespace owner",
          "type": "string",
          "enum": ["1.1.0", "1.2.0"]
        },
        "activateFilterReduction": {
          "description": "Represents a switch to activate filter reduction so that filters in OData requests can be represented as ABAP select options",
          "type": "boolean",
          "default": false
        },
        "activateLrep": {
          "description": "Represents a switch to activate LREP as the persistence for configurations and texts",
          "type": "boolean",
          "default": false
        },
        "useHeadRequestForXsrfToken": {
          "description": "Represents a switch to use HEAD-Requests instead of GET-Requests when fetching the XSRF-Security-Token",
          "type": "boolean",
          "default": false
        }
      }
    },
    "sap.cloud.portal": {
      "title": "JSON schema for SAP.CLOUD.PORTAL Namespace",
      "description": "Represents Cloud Portal specific attributes",
      "type": "object"
    },
    "sap.gui": {
      "title": "JSON schema for SAP.GUI Namespace",
      "description": "Represents GUI specific attributes",
      "type": "object",
      "required": ["transaction"],
      "additionalProperties": false,
      "properties": {
        "_version": {
          "description": "Represents attributes format version. It is managed by namespace owner",
          "type": "string",
          "enum": ["1.1.0", "1.2.0"]
        },
        "transaction": {
          "description": "Represents transaction of an application",
          "type": "string",
          "pattern": "^[a-zA-Z0-9\\/_]{1,20}$"
        },
        "flavorId": {
          "description": "Represents SAP Screen Personas Flavor ID",
          "type": "string",
          "pattern": "^[A-F0-9]{1,32}$"
        }
      }
    },
    "sap.integration": {
      "title": "JSON schema for SAP.INTEGRATION Namespace",
      "description": "Represents Application Integration specific attributes",
      "type": "object",
      "required": ["urlTemplateId", "parameters"],
      "properties": {
        "_version": {
          "description": "Represents attributes format version. It is managed by namespace owner",
          "type": "string",
          "enum": ["1.0.0"]
        },
        "urlTemplateId": {
          "description": "Reference to the desired URL Template",
          "type": "string",
          "examples": ["template.sap.sfsf", "template.sap.ui5", "template.sap.wda"]
        },
        "parameters": {
          "description": "Represents configuration parameters which will be used by Template Engine to compile URL Template",
          "type": "array",
          "items": {
            "type": "object",
            "required": ["key", "value"],
            "properties": {
              "key": {
                "type": "string",
                "description": "Represents the name of the desired parameter"
              },
              "value": {
                "type": "string",
                "description": "Represents the actual value of the desired parameter"
              }
            }
          }
        }
      }
    },
    "sap.wcf": {
      "title": "JSON schema for SAP.WCF Namespace",
      "description": "Represents WCF Application specific attributes",
      "type": "object",
      "required": ["wcf-target-id"],
      "additionalProperties": false,
      "properties": {
        "_version": {
          "description": "Represents attributes format version. It is managed by namespace owner",
          "type": "string",
          "enum": ["1.1.0"]
        },
        "wcf-target-id": {
          "description": "Represents the target technical id for a WCF Application",
          "type": "string",
          "pattern": "^[a-zA-Z0-9\\/_]{1,10}$"
        }
      }
    },
    "sap.ui.smartbusiness.app": {
      "title": "JSON schema for SAP.UI.SMARTBUSINESS.APP Namespace",
      "description": "Represents specific attributes for Smart Business  ",
      "type": "object"
    },
    "sap.mobile": {
      "title": "JSON schema for SAP.MOBILE Namespace",
      "description": "Represents mobile specific attributes",
      "type": "object",
      "required": ["definingRequests"],
      "properties": {
        "_version": {
          "description": "Represents attributes format version. It is managed by namespace owner",
          "type": "string",
          "enum": ["1.1.0"]
        },
        "definingRequests": {
          "description": "Represents mobile specific attributes",
          "type": "object",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-zA-Z0-9_\\.\\-]*": {
              "$ref": "#/$defs/definingRequest"
            }
          }
        }
      }
    },
    "sap.copilot": {
      "title": "JSON schema for SAP.COPILOT Namespace",
      "description": "Represents specific attributes for SAP CoPilot",
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "_version": {
          "description": "Represents SAP.COPILOT attributes format version. It is managed by namespace owner",
          "type": "string",
          "enum": ["1.0.0", "1.1.0"]
        },
        "contextAnalysis": {
          "description": "Settings for the context analysis features of SAP CoPilot",
          "type": "object",
          "additionalProperties": true,
          "properties": {
            "allowAddingObjectsFromAppScreenToCollection": {
              "description": "Enable/Disable the ability for SAP CoPilot to analyze your Application Screens and add the found objects to a Collection",
              "type": "boolean",
              "default": true
            },
            "whitelistedEntityTypes": {
              "description": "A list of the whitelisted EntityTypes, prefixed with their namespace, that SAP CoPilot can display. The empty list is ignored, thus allowing all EntityTypes by default.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "digitalAssistant": {
          "description": "Settings for the Digital Assistant features of SAP CoPilot",
          "type": "object",
          "additionalProperties": true,
          "properties": {
            "intentDefinition": {
              "description": "A list of Intent",
              "type": "object",
              "additionalProperties": false,
              "patternProperties": {
                "^[a-zA-Z0-9_\\.\\-]*$": {
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "uri": {
                      "description": "Represents the uri of the intent",
                      "type": "string"
                    },
                    "dataSources": {
                      "description": "A list of the sap.app.dataSources used by the intent",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "i18n": {
                      "description": "Represents the uri of the translation file",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "sap.map": {
      "title": "JSON schema for SAP.MAP Namespace",
      "description": "Represents specific attributes for SAP.MAP  ",
      "type": "object"
    },
    "sap.url": {
      "title": "JSON schema for SAP.URL Namespace",
      "description": "Represents specific attributes for SAP URL",
      "type": "object",
      "additionalProperties": false,
      "required": ["uri"],
      "properties": {
        "_version": {
          "description": "Represents attributes format version. It is managed by namespace owner",
          "type": "string",
          "enum": ["1.0.0"]
        },
        "uri": {
          "description": "Represents URI of an application",
          "type": "string"
        }
      }
    },
    "sap.platform.sfsf": {
      "title": "JSON schema for SAP.PLATFORM.SFSF Namespace",
      "description": "Represents SFSF platform specific attributes",
      "type": "object",
      "additionalProperties": false,
      "required": ["appName"],
      "properties": {
        "_version": {
          "description": "Represents attributes format version. It is managed by namespace owner",
          "type": "string",
          "enum": ["1.0.0"]
        },
        "uri": {
          "description": "Represents the uri inside the SFSF app",
          "type": "string"
        },
        "appName": {
          "description": "Represents the SFSF application name",
          "type": "string"
        },
        "appVersion": {
          "description": "Represents the version of the SFSF application",
          "type": "string"
        }
      }
    },
    "sap.cloud": {
      "title": "JSON schema for SAP.CLOUD Namespace",
      "description": "Represents cloud platform specific attributes",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "_version": {
          "description": "Represents attributes format version. It is managed by namespace owner",
          "type": "string",
          "enum": ["1.0.0", "1.1.0", "1.2.0"]
        },
        "service": {
          "description": "Unique Business Service Identifier",
          "type": "string",
          "pattern": "^[^- @#$%^&()!]+$"
        },
        "public": {
          "description": "Specify if the UI can be accessed from a different space than origin development space",
          "type": "boolean",
          "default": false
        }
      }
    },
    "sap.card": {
      "title": "JSON schema for SAP.CARD Namespace",
      "description": "Represents general card attributes",
      "type": "object",
      "additionalProperties": false,
      "required": ["type", "header"],
      "properties": {
        "_version": {
          "description": "Represents SAP.CARD attributes format version. It is managed by namespace owner",
          "type": "string",
          "enum": [
            "1.1.0",
            "1.2.0",
            "1.3.0",
            "1.4.0",
            "1.5.0",
            "1.6.0",
            "1.7.0",
            "1.8.0",
            "1.9.0",
            "1.10.0",
            "1.11.0",
            "1.13.0",
            "1.14.0",
            "1.15.0",
            "1.16.0",
            "1.17.0",
            "1.18.0",
            "1.19.0",
            "1.20.0",
            "1.21.0",
            "1.22.0",
            "1.23.0",
            "1.24.0",
            "1.25.0",
            "1.26.0",
            "1.27.0",
            "1.28.0",
            "1.29.0",
            "1.30.0",
            "1.31.0",
            "1.32.0",
            "1.33.0",
            "1.34.0",
            "1.35.0",
            "1.36.0",
            "1.37.0",
            "1.38.0",
            "1.39.0",
            "1.40.0",
            "1.41.0",
            "1.42.0",
            "1.43.0",
            "1.44.0",
            "1.45.0",
            "1.46.0",
            "1.47.0",
            "1.48.0",
            "1.49.0",
            "1.50.0",
            "1.51.0"
          ]
        },
        "designtime": {
          "description": "[Deprecated] The path to the design time folder with assets files",
          "type": "string",
          "deprecated": true
        },
        "configuration": {
          "description": "General configuration of the card. Allows to define parameters, destinations, filters and more",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "editor": {
              "description": "The path to the design time configuration file. Used for Configuration Editor.",
              "type": "string"
            },
            "enableMarkdown": {
              "description": "Markdown enablement for Adaptive Content",
              "type": "boolean"
            },
            "helpId": {
              "description": "[Experimental] The help-id which will be rendered as data-help-id on the base element of the card.",
              "type": "string"
            },
            "modelSizeLimit": {
              "description": "[Experimental] Represents the maximum number of entries that are used for list bindings.",
              "oneOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/simpleBinding"
                }
              ],
              "default": 1000
            },
            "parameters": {
              "description": "Map of parameters",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/$defs/Configuration.Parameter"
              }
            },
            "filters": {
              "description": "Map of filters",
              "additionalProperties": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/Configuration.FilterType.Select"
                  },
                  {
                    "$ref": "#/$defs/Configuration.FilterType.DateRange"
                  },
                  {
                    "$ref": "#/$defs/Configuration.FilterType.Search"
                  },
                  {
                    "$ref": "#/$defs/Configuration.FilterType.ComboBox"
                  }
                ]
              }
            },
            "destinations": {
              "description": "Describes what destinations are used by the card",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/$defs/Configuration.Destinations"
              }
            },
            "csrfTokens": {
              "description": "Describes the CSRF tokens used by the card",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/$defs/Configuration.CSRFToken"
              }
            },
            "actionHandlers": {
              "description": "Holds configuration for the default action handlers",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "submit": {
                  "description": "Configuration for the submit action handler",
                  "type": "object"
                }
              }
            },
            "messages": {
              "description": "Describes the messages for the card",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/$defs/Configuration.NoData"
              }
            },
            "componentData": {
              "description": "[Experimental] Object which will be passed to the component as 'componentData'",
              "type": "object"
            }
          }
        },
        "type": {
          "description": "Represents the type of the card's content",
          "type": "string",
          "enum": ["AdaptiveCard", "Analytical", "AnalyticsCloud", "Calendar", "Component", "List", "Object", "Table", "Timeline", "WebPage"]
        },
        "data": {
          "$ref": "#/$defs/data"
        },
        "headerPosition": {
          "description": "Represents card header position - under or over the content",
          "type": "string",
          "oneOf": [
            {
              "enum": ["Top", "Bottom"],
              "default": "Top"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "header": {
          "description": "Represents card header attributes",
          "$ref": "#/$defs/HeaderType"
        },
        "content": {
          "description": "Represents card content attributes. Content type should be the same as card type e.g. if card type List is used the content type should also be List"
        },
        "extension": {
          "description": "A path to an Extension implementation. It is resolved relatively to the manifest",
          "type": "string"
        },
        "footer": {
          "description": "Represent card footer attributes",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "actionsStrip": {
              "description": "Describes actions strip",
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/actionsStripItem"
                  }
                },
                {
                  "$ref": "#/$defs/actionsStrip"
                }
              ]
            },
            "paginator": {
              "description": "[Experimental] Describes the paginator",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "pageSize": {
                  "description": "Represents the number of the items in one page",
                  "oneOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/$defs/simpleBinding"
                    }
                  ]
                },
                "totalCount": {
                  "description": "Represents the total count of the items in all pages",
                  "oneOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/$defs/simpleBinding"
                    }
                  ]
                }
              }
            },
            "visible": {
              "description": "[Experimental] Visibility of the footer",
              "$ref": "#/$defs/visibility"
            },
            "closeButton": {
              "description": "[Experimental] Defines the Close button when the card is opened by the ShowCard action.",
              "$ref": "#/$defs/closeButton"
            }
          }
        },
        "requiredHeight": {
          "description": "Represents card minimum required height",
          "type": "string"
        },
        "requiredWidth": {
          "description": "Represents card minimum required width",
          "type": "string"
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "List"
              }
            }
          },
          "then": {
            "properties": {
              "content": {
                "$ref": "#/$defs/ContentType.List"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Analytical"
              }
            }
          },
          "then": {
            "properties": {
              "content": {
                "$ref": "#/$defs/ContentType.Analytical"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AnalyticsCloud"
              }
            }
          },
          "then": {
            "properties": {
              "content": {
                "$ref": "#/$defs/ContentType.AnalyticsCloud"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Timeline"
              }
            }
          },
          "then": {
            "properties": {
              "content": {
                "$ref": "#/$defs/ContentType.Timeline"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Table"
              }
            }
          },
          "then": {
            "properties": {
              "content": {
                "$ref": "#/$defs/ContentType.Table"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Object"
              }
            }
          },
          "then": {
            "properties": {
              "content": {
                "$ref": "#/$defs/ContentType.Object"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Component"
              }
            }
          },
          "then": {
            "properties": {
              "content": {
                "$ref": "#/$defs/ContentType.Component"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Calendar"
              }
            }
          },
          "then": {
            "properties": {
              "content": {
                "$ref": "#/$defs/ContentType.Calendar"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "AdaptiveCard"
              }
            }
          },
          "then": {
            "properties": {
              "content": {
                "$ref": "#/$defs/ContentType.AdaptiveCard"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "WebPage"
              }
            }
          },
          "then": {
            "properties": {
              "content": {
                "$ref": "#/$defs/ContentType.WebPage"
              }
            }
          }
        }
      ]
    },
    "sap.package": {
      "title": "JSON schema for SAP.PACKAGE Namespace",
      "description": "Represents general package attributes. Experimental, will be detailed in the future",
      "type": "object",
      "additionalProperties": true,
      "required": ["id", "title", "description", "packageVersion", "vendor", "support"],
      "properties": {
        "_version": {
          "description": "Represents SAP.PACKAGE attributes format version. It is managed by namespace owner",
          "type": "string",
          "enum": ["1.0.0", "1.1.0", "1.2.0"]
        },
        "id": {
          "description": "Represents mandatory unique package identifier",
          "$ref": "#/$defs/iddef"
        },
        "i18n": {
          "default": "i18n/i18n.properties",
          "description": "Represents path inside the package to the properties file containing text symbols for the packages texts",
          "oneOf": [
            {
              "default": "i18n/i18n.properties",
              "type": "string"
            }
          ]
        },
        "packageVersion": {
          "description": "Represents mandatory semantic version of the package information and optional the upgrade notification",
          "type": "object",
          "required": ["version"],
          "properties": {
            "version": {
              "description": "Represents mandatory semantic version of the package",
              "$ref": "#/$defs/semanticversion"
            },
            "upgradeNotification": {
              "description": "Represents optional upgrade notification once the package is available. none - no notification, package will be installed automatically for any version. major - notification before a new major version is installed. major.minor - notification before a major and minor version is installed. all - notification before any new version is installed, including patches",
              "type": "string",
              "default": "all",
              "enum": ["none", "major", "major.minor", "all"]
            }
          }
        },
        "type": {
          "description": "Represents type of an package and can be card, workflow, workspace-template",
          "type": "string",
          "enum": ["card", "workflow", "workspace-template"]
        },
        "title": {
          "description": "Represents a title (mandatory); to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
          "$ref": "#/$defs/i18n_key_string",
          "i18n": {
            "type": "XTIT",
            "comment": "Package title"
          }
        },
        "subTitle": {
          "description": "Represents a subtitle to the title; to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
          "$ref": "#/$defs/i18n_key_string",
          "i18n": {
            "type": "XTIT",
            "comment": "Package subtitle"
          }
        },
        "shortTitle": {
          "description": "Represents a shorter version of the title; to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
          "$ref": "#/$defs/i18n_key_string",
          "i18n": {
            "type": "XTIT",
            "comment": "Shorter version of the package title"
          }
        },
        "info": {
          "description": "Represents additional information to the title; to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
          "$ref": "#/$defs/i18n_key_string",
          "i18n": {
            "type": "YINF",
            "comment": "Additional information to the package title"
          }
        },
        "description": {
          "description": "Represents a description; to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
          "$ref": "#/$defs/i18n_key_string",
          "i18n": {
            "type": "YDES",
            "comment": "Package description"
          }
        },
        "icon": {
          "description": "Represents icon name or source URL for the package",
          "type": "string"
        },
        "tags": {
          "description": "Represents array of keywords used to find the package",
          "type": "object",
          "additionalProperties": true,
          "required": ["keywords"],
          "properties": {
            "keywords": {
              "$ref": "#/$defs/tag"
            },
            "technicalAttributes": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[A-Z0-9_\\-\\/]+$"
              }
            }
          }
        },
        "vendor": {
          "description": "Represents the support information",
          "$ref": "#/$defs/vendor"
        },
        "homepage": {
          "description": "Represents the homepage information",
          "$ref": "#/$defs/infolink"
        },
        "support": {
          "description": "Represents the support information",
          "$ref": "#/$defs/infolink"
        },
        "documentation": {
          "description": "Represents the documentation information",
          "$ref": "#/$defs/infolink"
        },
        "contents": {
          "type": "array",
          "items": {
            "description": "Represents the artifacts contained in the package",
            "$ref": "#/$defs/contentitem"
          }
        },
        "consumption": {
          "description": "Represents list of product ids that are allowed to consume this package. if not defined all products that are capable of installing this package are allowed",
          "type": "array",
          "items": {
            "description": "Represents the id of the product that can consume this package.",
            "type": "string"
          }
        },
        "dependencies": {
          "description": "Represents the products and service that the pacakge depends on",
          "type": "object",
          "properties": {
            "products": {
              "description": "List of products that this package depends on",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "services": {
              "description": "List of services that this package depends on",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "sap.artifact": {
      "title": "JSON schema for SAP.ARTIFACT Namespace",
      "description": "Represents general artifact attributes.",
      "type": "object",
      "additionalProperties": true,
      "required": ["id", "type", "title", "description", "artifactVersion"],
      "properties": {
        "_version": {
          "description": "Represents SAP.ARTIFACT attributes format version. It is managed by namespace owner",
          "type": "string",
          "enum": ["1.0.0", "1.1.0", "1.2.0"]
        },
        "id": {
          "description": "Represents mandatory unique artifact identifier",
          "$ref": "#/$defs/iddef"
        },
        "i18n": {
          "default": "i18n/i18n.properties",
          "description": "Represents path inside the artifact to the properties file containing text symbols for the artifacts texts",
          "oneOf": [
            {
              "default": "i18n/i18n.properties",
              "type": "string"
            }
          ]
        },
        "artifactVersion": {
          "description": "Represents mandatory semantic version of the artifact",
          "type": "object",
          "required": ["version"],
          "properties": {
            "version": {
              "$ref": "#/$defs/semanticversion"
            }
          }
        },
        "type": {
          "description": "Represents type of an artifact and can be card, workflow, workspace-template",
          "type": "string",
          "enum": ["card", "workflow", "workspace-template"]
        },
        "title": {
          "description": "Represents a title (mandatory); to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
          "$ref": "#/$defs/i18n_key_string",
          "i18n": {
            "type": "XTIT",
            "comment": "Artifact title"
          }
        },
        "subTitle": {
          "description": "Represents a subtitle to the title; to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
          "$ref": "#/$defs/i18n_key_string",
          "i18n": {
            "type": "XTIT",
            "comment": "Artifact subtitle"
          }
        },
        "shortTitle": {
          "description": "Represents a shorter version of the title; to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
          "$ref": "#/$defs/i18n_key_string",
          "i18n": {
            "type": "XTIT",
            "comment": "Shorter version of the artifact title"
          }
        },
        "info": {
          "description": "Represents additional information to the title; to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
          "$ref": "#/$defs/i18n_key_string",
          "i18n": {
            "type": "YINF",
            "comment": "Additional information to the artifact title"
          }
        },
        "description": {
          "description": "Represents a description; to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
          "$ref": "#/$defs/i18n_key_string",
          "i18n": {
            "type": "YDES",
            "comment": "Artifact description"
          }
        },
        "icon": {
          "description": "Represents icon name or source URL for the artifact",
          "type": "string"
        },
        "tags": {
          "description": "Represents array of keywords used to find the artifact",
          "type": "object",
          "additionalProperties": true,
          "required": ["keywords"],
          "properties": {
            "keywords": {
              "$ref": "#/$defs/tag"
            },
            "technicalAttributes": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[A-Z0-9_\\-\\/]+$"
              }
            }
          }
        }
      }
    },
    "sap.bpa.task": {
      "title": "JSON schema for sap.bpa.task Namespace",
      "description": "Represents SBPA Custom Task UI Attributes",
      "type": "object",
      "required": ["outcomes", "category", "_version"],
      "additionalProperties": false,
      "properties": {
        "_version": {
          "description": "Represents attributes format version. It is managed by namespace owner",
          "type": "string",
          "enum": ["1.0.0", "1.1.0"]
        },
        "inputs": {
          "description": "Represents the inputs of the task ui",
          "$ref": "http://json-schema.org/draft-07/schema"
        },
        "outputs": {
          "description": "Represents the outputs of the task ui",
          "$ref": "http://json-schema.org/draft-07/schema"
        },
        "category": {
          "description": "Represents the category of the task ui",
          "type": "string",
          "enum": ["standard", "approval"]
        },
        "outcomes": {
          "title": "outcomes",
          "type": "array",
          "description": "Represents the outcomes of the task ui",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "required": ["id", "label"],
            "properties": {
              "id": {
                "description": "Represents the id of the outcome",
                "type": "string",
                "pattern": "^[a-zA-Z0-9_]{1,60}$"
              },
              "label": {
                "type": "string",
                "description": "Represents the label of the outcome"
              },
              "type": {
                "type": "string",
                "description": "Represents the intent of the outcome within a process",
                "enum": ["positive", "negative", "neutral"]
              }
            }
          },
          "minItems": 1,
          "uniqueItems": true,
          "maxItems": 5
        },
        "preview": {
          "description": "Configuration for a preview of the application in SBPA",
          "type": "object",
          "properties": {
            "src": {
              "description": "Relative path to an image. The path to the image is relative to the baseUrl of the application",
              "type": "string"
            }
          }
        }
      },
      "oneOf": [
        {
          "required": ["inputs", "outputs"]
        }
      ]
    },
    "sap.cards.ap": {
      "title": "JSON schema for sap.cards.ap namespace",
      "description": "Represents generated cards saved to the application repository",
      "type": "object",
      "properties": {
        "_version": {
          "description": "Represents attributes format version.",
          "type": "string",
          "enum": ["1.0.0", "1.1.0"]
        },
        "embeds": {
          "type": "object",
          "description": "Represents an object with reference to the generated cards",
          "properties": {
            "ObjectPage": {
              "$ref": "#/$defs/embedsSettings"
            }
          }
        }
      }
    }
  },
  "$defs": {
    "manifestSettings": {
      "description": "Represents the manifest settings",
      "type": "object",
      "properties": {
        "localUri": {
          "type": "string",
          "description": "Represents the local uri of the generated card"
        },
        "hideActions": {
          "type": "boolean",
          "description": "Represents a switch to hide actions from the shared card"
        }
      }
    },
    "embedsSettings": {
      "description": "Represents the embeds settings",
      "type": "object",
      "properties": {
        "default": {
          "type": "string",
          "description": "Represents the detault card",
          "pattern": "^[a-zA-Z0-9_]+$"
        },
        "manifests": {
          "type": "object",
          "desciption": "Represents the manifests of the generated cards",
          "patternProperties": {
            "^[a-zA-Z0-9_]+$": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/manifestSettings"
              }
            }
          }
        }
      }
    },
    "tag_0": {
      "type": "array",
      "items": {
        "description": "Represents a tag; to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
        "$ref": "#/$defs/i18n_key_string",
        "type": "string"
      }
    },
    "i18n_key_string": {
      "anyOf": [
        {
          "type": "string",
          "pattern": "^\\{\\{[\\w][\\w\\.\\-]*\\}\\}$"
        },
        {
          "type": "string"
        }
      ]
    },
    "semanticversion": {
      "description": "The version number of the schema in major.minor.patch format.",
      "type": "string",
      "pattern": "^[0-9]{1,}.[0-9]{1,}.[0-9]{1,}$"
    },
    "iddef": {
      "type": "string",
      "maxLength": 70,
      "pattern": "^[A-Za-z]{2,}.[A-Za-z]{2,}"
    },
    "contentitem": {
      "description": "Represents an item of the content list defining the sub manifest and baseurl",
      "type": "object",
      "properties": {
        "baseURL": {
          "description": "Relative url to the artifact within the folder in this package",
          "type": "string"
        },
        "manifest": {
          "description": "Wraps the child manifest",
          "type": "object",
          "properties": {
            "sap.artifact": {
              "description": "The artifacts manifest",
              "type": "object"
            }
          }
        }
      }
    },
    "infolink": {
      "description": "Represents a link information with text and url",
      "type": "object",
      "required": ["url", "text"],
      "properties": {
        "url": {
          "description": "Represents a target url",
          "type": "string",
          "format": "uri-template"
        },
        "text": {
          "description": "Represents a descriptive text for the target",
          "type": "string"
        }
      }
    },
    "vendor": {
      "description": "Represents the vendor information",
      "type": "object",
      "required": ["id", "name", "url"],
      "properties": {
        "id": {
          "description": "Represents the vendor id",
          "type": "string"
        },
        "name": {
          "description": "Represents the vendor name",
          "type": "string"
        },
        "lineOfBusiness": {
          "description": "Represents the vendor line of business within the vendors organization if any",
          "type": "string"
        },
        "url": {
          "description": "Represents a target url",
          "type": "string",
          "format": "uri-template"
        }
      }
    },
    "actionsStripItemBindingInfo": {
      "type": "object",
      "description": "[Experimental] Binding info for items of type actionsStripItem",
      "additionalProperties": false,
      "properties": {
        "template": {
          "$ref": "#/$defs/actionsStripItem"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "MicroChart.StackedBar.Bar": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "value": {
          "description": "The actual value shown as a colored horizontal bar",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "displayValue": {
          "description": "The value, which will be displayed as a text in the tooltip of the bar",
          "type": "string"
        },
        "legendTitle": {
          "description": "Title, which will be displayed in the legend",
          "type": "string"
        },
        "color": {
          "description": "The color of the bar",
          "type": "string",
          "oneOf": [
            {
              "$ref": "#/$defs/Enums.ValueColor"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        }
      }
    },
    "MicroChart.Bullet.Threshold": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "value": {
          "description": "The value of the threshold",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "color": {
          "description": "The state color of the threshold",
          "type": "string",
          "oneOf": [
            {
              "$ref": "#/$defs/Enums.ValueColor"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        }
      }
    },
    "MicroChart.StackedBar": {
      "type": "object",
      "additionalProperties": false,
      "required": ["type"],
      "properties": {
        "type": {
          "description": "Represents the type of the MicroChart",
          "type": "string",
          "const": "StackedBar"
        },
        "maxValue": {
          "description": "The maximum scale value for the bar chart",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "displayValue": {
          "description": "The value, which will be displayed as a text next to the bar",
          "type": "string"
        },
        "displayZeroValue": {
          "description": "Defines whether bars with zero values are displayed",
          "oneOf": [
            {
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "bars": {
          "description": "The bars of the chart",
          "type": "array",
          "items": {
            "$ref": "#/$defs/MicroChart.StackedBar.Bar"
          }
        },
        "visible": {
          "description": "Represents the visibility of the chart bar",
          "$ref": "#/$defs/visibility"
        }
      }
    },
    "MicroChart.Bullet": {
      "type": "object",
      "additionalProperties": false,
      "required": ["type"],
      "properties": {
        "type": {
          "description": "Represents the type of the MicroChart",
          "type": "string",
          "const": "Bullet"
        },
        "value": {
          "description": "The actual value shown as a colored horizontal bar",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "minValue": {
          "description": "The minimum scale value for the bar chart",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "maxValue": {
          "description": "The maximum scale value for the bar chart",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "displayValue": {
          "description": "The actual value, which will be displayed as a text next to the bar",
          "type": "string"
        },
        "target": {
          "description": "The target value - displayed as a vertical line (marker)",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "scale": {
          "description": "The scaling suffix that is appended to all values",
          "type": "string"
        },
        "color": {
          "description": "The state color of the bar",
          "type": "string",
          "oneOf": [
            {
              "$ref": "#/$defs/Enums.ValueColor"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "thresholds": {
          "description": "The thresholds indicators of the bar",
          "type": "array",
          "items": {
            "$ref": "#/$defs/MicroChart.Bullet.Threshold"
          }
        },
        "visible": {
          "description": "Represents the visibility of the chart",
          "$ref": "#/$defs/visibility"
        }
      }
    },
    "MicroChart.Generic": {
      "type": "object",
      "additionalProperties": true,
      "required": ["type"],
      "properties": {
        "type": {
          "description": "Represents the type of the MicroChart",
          "type": "string",
          "enum": ["Line", "Column", "HarveyBall", "Radial"]
        }
      }
    },
    "Configuration.Filter.ComboBoxItem": {
      "description": "A single Combo Box filter selection option",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "title": {
          "description": "The title of the filter option",
          "type": "string"
        },
        "key": {
          "description": "The unique key of the filter option. Mapped to the filter's value",
          "type": "string"
        },
        "additionalText": {
          "description": "The secondary value for the combo box item.",
          "type": "string"
        }
      }
    },
    "Configuration.Filter.Item": {
      "description": "A single filter selection option",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "title": {
          "description": "The title of the filter option",
          "type": "string"
        },
        "key": {
          "description": "The unique key of the filter option. Mapped to the filter's value",
          "type": "string"
        }
      }
    },
    "Configuration.BasicDataType": {
      "description": "Basic data types for parameters and filters",
      "type": "string",
      "enum": ["string", "integer", "number", "boolean", "date", "datetime"]
    },
    "ibnTarget": {
      "description": "The application identifier consisting of semanticObject and action or ",
      "type": "object",
      "additionalProperties": false,
      "required": ["semanticObject", "action"],
      "properties": {
        "semanticObject": {
          "type": "string"
        },
        "action": {
          "type": "string"
        }
      }
    },
    "hideCardActionParameters": {
      "description": "Parameters for HideCard action",
      "type": "object",
      "additionalProperties": false
    },
    "showCardActionParameters": {
      "description": "Parameters for ShowCard action",
      "type": "object",
      "additionalProperties": false,
      "required": ["manifest"],
      "properties": {
        "manifest": {
          "description": "An application identifier consisting of semanticObject and action",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "object"
            }
          ]
        },
        "parameters": {
          "type": "object"
        },
        "data": {
          "type": "object"
        },
        "width": {
          "type": "string"
        },
        "baseUrl": {
          "type": "string"
        },
        "resizable": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        }
      }
    },
    "submitActionParameters": {
      "description": "Parameters for Submit action",
      "type": "object",
      "additionalProperties": false
    },
    "navigationActionIBParameters": {
      "description": "Parameters for Intent-Based Navigation action",
      "type": "object",
      "additionalProperties": false,
      "required": ["ibnTarget"],
      "properties": {
        "ibnTarget": {
          "description": "An application identifier consisting of semanticObject and action",
          "$ref": "#/$defs/ibnTarget"
        },
        "ibnParams": {
          "description": "Key/value pairs for parameters of the target application",
          "type": "object"
        },
        "ibnAppSpecificRoute": {
          "description": "An application specific route that is passed to the target application",
          "type": "string"
        }
      }
    },
    "navigationActionParameters": {
      "description": "Parameters for Navigation action",
      "type": "object",
      "additionalProperties": false,
      "required": ["url"],
      "properties": {
        "url": {
          "type": "string"
        },
        "target": {
          "type": "string"
        }
      }
    },
    "customActionParameters": {
      "description": "Parameters for Custom action",
      "type": "object",
      "additionalProperties": true
    },
    "cache": {
      "description": "Cache control settings",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "maxAge": {
          "description": "The maximum age for which the cache is considered fresh",
          "type": "number",
          "default": 0
        },
        "staleWhileRevalidate": {
          "description": "Should we show stale cache while revalidating",
          "type": "boolean",
          "default": false
        },
        "noStore": {
          "description": "[Deprecated] Set to true to disable caching for this card",
          "deprecated": true,
          "type": "boolean",
          "default": false
        },
        "enabled": {
          "description": "Set to false to disable caching for this card",
          "type": "boolean",
          "default": false
        }
      }
    },
    "batchRequest": {
      "description": "Represents a request which is a part of a batch request",
      "type": "object",
      "additionalProperties": false,
      "required": ["url", "method"],
      "properties": {
        "url": {
          "description": "The URL to make the request to",
          "type": "string"
        },
        "method": {
          "description": "The HTTP method",
          "type": "string",
          "enum": ["GET", "POST", "PUT", "PATCH", "DELETE"]
        },
        "headers": {
          "description": "Represents HTTP headers",
          "type": "object",
          "additionalProperties": true
        },
        "body": {
          "description": "Represents the request body",
          "additionalProperties": true
        }
      }
    },
    "extension": {
      "description": "[Experimental] Represents attributes, needed to get data via extension",
      "type": "object",
      "additionalProperties": false,
      "required": ["method"],
      "properties": {
        "method": {
          "description": "The method of the extension, which fetches data",
          "type": "string"
        },
        "args": {
          "description": "The arguments, with which the method will be called",
          "type": "array"
        }
      }
    },
    "service_0": {
      "description": "Represents service that will be used for actions",
      "oneOf": [
        {
          "description": "Represents name of the Service to be used for the action",
          "type": "string"
        },
        {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "name": {
              "description": "Represents name of the Service to be used for the action",
              "type": "string"
            },
            "parameters": {
              "type": "object"
            }
          }
        }
      ]
    },
    "request": {
      "description": "Represents request attributes",
      "type": "object",
      "additionalProperties": false,
      "required": ["url"],
      "properties": {
        "mode": {
          "description": "The mode of the request",
          "type": "string",
          "oneOf": [
            {
              "enum": ["no-cors", "same-origin", "cors"],
              "default": "cors"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "url": {
          "description": "The URL to make the request to",
          "type": "string"
        },
        "method": {
          "description": "The HTTP method",
          "type": "string",
          "oneOf": [
            {
              "enum": ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS", "HEAD"],
              "default": "GET"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "parameters": {
          "description": "Represents the request parameters. If it is a POST request the parameters will be put as key/value pairs into the body of the request",
          "type": "object"
        },
        "headers": {
          "description": "Represents HTTP headers",
          "type": "object",
          "additionalProperties": true
        },
        "retryAfter": {
          "description": "Number of seconds before the request is retried if it failed the previous time",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "timeout": {
          "description": "A timeout (in milliseconds) for the request. A value of 0 means there will be no timeout.",
          "oneOf": [
            {
              "type": "number",
              "default": 15000
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "withCredentials": {
          "description": "Indicates whether cross-site requests should be made using credentials",
          "oneOf": [
            {
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "batch": {
          "description": "Map of requests to be batched",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/batchRequest"
          }
        },
        "cache": {
          "description": "Cache control settings",
          "$ref": "#/$defs/cache"
        }
      }
    },
    "statusTextFormatter": {
      "type": "object",
      "description": "Defines fields for dynamic status formatting",
      "additionalProperties": false,
      "properties": {
        "format": {
          "description": "Defines binding information",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "translationKey": {
              "type": "string"
            },
            "parts": {
              "type": "array"
            }
          }
        }
      }
    },
    "iconBackgroundColor": {
      "oneOf": [
        {
          "enum": ["Accent1", "Accent2", "Accent3", "Accent4", "Accent5", "Accent6", "Accent7", "Accent8", "Accent9", "Accent10", "Placeholder", "Random", "TileIcon", "Transparent"],
          "default": "Transparent"
        },
        {
          "$ref": "#/$defs/simpleBinding"
        }
      ]
    },
    "ContentType.Calendar.SpecialDate.Template": {
      "description": "The template for all specialDates",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "startDate": {
          "description": "The start date of the special date. The accepted date format is ISO 8601",
          "type": "string"
        },
        "endDate": {
          "description": "The end date of the special date. The accepted date format is ISO 8601",
          "type": "string"
        },
        "type": {
          "description": "The type of the special date - one of the types defined in the legend",
          "oneOf": [
            {
              "enum": [
                "Type01",
                "Type02",
                "Type03",
                "Type04",
                "Type05",
                "Type06",
                "Type07",
                "Type08",
                "Type09",
                "Type10",
                "Type11",
                "Type12",
                "Type13",
                "Type14",
                "Type15",
                "Type16",
                "Type17",
                "Type18",
                "Type19",
                "Type20"
              ],
              "default": "Type01"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        }
      }
    },
    "ContentType.Calendar.LegendItem.Template": {
      "description": "The template for all legendItems",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "category": {
          "description": "Defines which card component describes the legend item. Available categories: \"calendar\" (represented as square) or \"appointment\" (circle)",
          "type": "string"
        },
        "text": {
          "description": "The describing information of the item",
          "type": "string"
        },
        "type": {
          "description": "The type of the legend item corresponding with the described component",
          "oneOf": [
            {
              "enum": [
                "Type01",
                "Type02",
                "Type03",
                "Type04",
                "Type05",
                "Type06",
                "Type07",
                "Type08",
                "Type09",
                "Type10",
                "Type11",
                "Type12",
                "Type13",
                "Type14",
                "Type15",
                "Type16",
                "Type17",
                "Type18",
                "Type19",
                "Type20"
              ],
              "default": "Type01"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        }
      }
    },
    "ContentType.Calendar.Item.Template": {
      "description": "The template for all items",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "startDate": {
          "description": "The start date of the item. The accepted date format is ISO 8601",
          "type": "string"
        },
        "endDate": {
          "description": "The end date of the item. The accepted date format is ISO 8601",
          "type": "string"
        },
        "title": {
          "description": "The title of the item",
          "type": "string"
        },
        "text": {
          "description": "The additional information of the item",
          "type": "string"
        },
        "icon": {
          "$ref": "#/$defs/simpleIcon"
        },
        "type": {
          "description": "The type of the item - one of the types defined in the legend",
          "oneOf": [
            {
              "enum": [
                "Type01",
                "Type02",
                "Type03",
                "Type04",
                "Type05",
                "Type06",
                "Type07",
                "Type08",
                "Type09",
                "Type10",
                "Type11",
                "Type12",
                "Type13",
                "Type14",
                "Type15",
                "Type16",
                "Type17",
                "Type18",
                "Type19",
                "Type20"
              ],
              "default": "Type01"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "actions": {
          "description": "Defines actions that can be applied on the item",
          "type": "array",
          "items": {
            "$ref": "#/$defs/action"
          }
        }
      }
    },
    "ContentType.Calendar.SpecialDate": {
      "description": "Describes each specialDate",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "template": {
          "$ref": "#/$defs/ContentType.Calendar.SpecialDate.Template"
        },
        "path": {
          "description": "Defines the path to the structure holding the data about the specialDates",
          "type": "string"
        }
      }
    },
    "ContentType.Calendar.LegendItem": {
      "description": "Describes each legendItem",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "template": {
          "$ref": "#/$defs/ContentType.Calendar.LegendItem.Template"
        },
        "path": {
          "description": "Defines the path to the structure holding the data about the legendItems",
          "type": "string"
        }
      }
    },
    "ContentType.Calendar.Item": {
      "description": "Describes each item",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "template": {
          "$ref": "#/$defs/ContentType.Calendar.Item.Template"
        },
        "path": {
          "description": "Defines the path to the structure holding the data about the items",
          "type": "string"
        }
      }
    },
    "progressIndicator": {
      "description": "Represents progress indicator attributes",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "state": {
          "description": "Represents state color",
          "oneOf": [
            {
              "$ref": "#/$defs/state"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "percent": {
          "description": "Represents progress indicator percent value",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "text": {
          "description": "Represents progress indicator text",
          "type": "string"
        }
      }
    },
    "identifier": {
      "description": "Represents identifier",
      "oneOf": [
        {
          "type": "boolean",
          "default": false
        },
        {
          "type": "object",
          "additionalProperties": false,
          "description": "[Deprecated]",
          "deprecated": true,
          "properties": {
            "url": {
              "type": "string"
            },
            "target": {
              "$ref": "#/$defs/target"
            }
          }
        }
      ]
    },
    "textAlign": {
      "description": "Represents options for text alignments",
      "type": "string",
      "enum": ["Begin", "Center", "End", "Initial", "Left", "Right"],
      "default": "Begin"
    },
    "ContentType.Table.Column": {
      "description": "Represents object item attributes",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "title": {
          "description": "Represents a title of the column; to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
          "$ref": "#/$defs/i18n_key_string",
          "i18n": {
            "type": "XCOL",
            "comment": "Column title"
          }
        },
        "width": {
          "description": "Defines the width of the column",
          "type": "string"
        },
        "hAlign": {
          "description": "Defines the horizontal alignment of the column content",
          "oneOf": [
            {
              "$ref": "#/$defs/textAlign"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "value": {
          "description": "Represents the text value of the column",
          "type": "string"
        },
        "additionalText": {
          "description": "Represents the additional text for the identifier column.",
          "type": "string"
        },
        "icon": {
          "description": "Represents column with icon",
          "$ref": "#/$defs/icon"
        },
        "state": {
          "description": "Defines the state of the column",
          "oneOf": [
            {
              "$ref": "#/$defs/state"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "url": {
          "description": "[Deprecated] Defines the URL string",
          "deprecated": true,
          "type": "string"
        },
        "target": {
          "description": "[Deprecated] Specifies where to open the 'url', if it is provided",
          "deprecated": true,
          "type": "string",
          "oneOf": [
            {
              "$ref": "#/$defs/target"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "identifier": {
          "oneOf": [
            {
              "$ref": "#/$defs/identifier"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "progressIndicator": {
          "description": "Represents progress indicator attributes",
          "$ref": "#/$defs/progressIndicator"
        },
        "visible": {
          "description": "Represents the visibility state of the column",
          "$ref": "#/$defs/visibility"
        },
        "actions": {
          "description": "Defines actions that can be applied on the group item",
          "type": "array",
          "items": {
            "$ref": "#/$defs/action"
          }
        },
        "showStateIcon": {
          "description": "Defines if a default state icon is shown",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "customStateIcon": {
          "description": "The custom state icon",
          "type": "string"
        }
      }
    },
    "ContentType.Object.Item.IconGroupIcon": {
      "description": "Definition for icons in the IconGroup",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "src": {
          "type": "string",
          "description": "Represents icon name or source URL"
        },
        "text": {
          "type": "string",
          "description": "[Deprecated] Represents text that will be displayed in the icon",
          "deprecated": true
        },
        "initials": {
          "type": "string",
          "description": "Used as fallback if the 'src' property is not set or there is an issue with the resource. Up to two Latin letters can be displayed"
        },
        "alt": {
          "type": "string",
          "description": "Represents text that will be displayed as a tooltip"
        }
      }
    },
    "ContentType.Object.Item.Validation": {
      "description": "[Experimental] Defines the user input validation",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "message": {
          "description": "Defines custom validation message text",
          "type": "string"
        },
        "type": {
          "description": "Defines the validation type",
          "oneOf": [
            {
              "enum": ["Error", "Warning", "Information"],
              "default": "Error"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "required": {
          "description": "Defines whether the user input is required",
          "oneOf": [
            {
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "minLength": {
          "description": "Defines the minimum number of characters",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "maxLength": {
          "description": "Defines the maximum number of characters",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "restrictToPredefinedOptions": {
          "description": "Defines whether the value is restricted to predefined options",
          "oneOf": [
            {
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "pattern": {
          "description": "Sets the regular expression pattern that should match the value",
          "type": "string"
        },
        "validate": {
          "description": "An extension function used to validate the value",
          "type": "string"
        }
      }
    },
    "ContentType.Object.Item.ComboBoxItemTemplate": {
      "description": "Template for combo box items",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "title": {
          "description": "The title of the option",
          "type": "string"
        },
        "key": {
          "description": "The unique key of the option. Mapped to the input's value",
          "type": "string"
        }
      }
    },
    "ContentType.Object.Item.IconGroupTemplate": {
      "description": "Template definition for the icons in the group",
      "type": "object",
      "additionalProperties": false,
      "required": ["icon"],
      "properties": {
        "icon": {
          "$ref": "#/$defs/ContentType.Object.Item.IconGroupIcon"
        },
        "actions": {
          "description": "Defines actions that can be applied on the icon",
          "type": "array",
          "items": {
            "$ref": "#/$defs/action"
          }
        }
      }
    },
    "ContentType.Object.Item.MainIndicator": {
      "description": "Represents the main numeric indicator of the NumericData",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "number": {
          "description": "The value of the main indicator",
          "type": "string"
        },
        "unit": {
          "description": "The unit of the main indicator",
          "type": "string"
        },
        "trend": {
          "description": "The trend indicator (direction)",
          "type": "string",
          "oneOf": [
            {
              "enum": ["Down", "None", "Up"],
              "default": "None"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "state": {
          "description": "The state color of the main indicator",
          "type": "string",
          "oneOf": [
            {
              "description": "The state color of the main indicator",
              "$ref": "#/$defs/Enums.ValueColor"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "size": {
          "oneOf": [
            {
              "enum": ["S", "L"],
              "default": "Default"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        }
      }
    },
    "target_0": {
      "description": "Specifies where to open an URL",
      "type": "string",
      "enum": ["_blank", "_self"],
      "default": "_blank"
    },
    "ContentType.Object.Item": {
      "description": "Represents a single item of information. It can contain label, value and image",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "icon": {
          "description": "Defines the icon of the item",
          "$ref": "#/$defs/icon"
        },
        "label": {
          "description": "Defines the label of the item",
          "type": "string"
        },
        "showColon": {
          "description": "Defines whether the colon next to the label is shown",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "value": {
          "description": "Represents the text, which is associated with the label",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "number"
            },
            {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "option": {
                  "description": "The date range option",
                  "type": "string"
                },
                "values": {
                  "type": "array"
                }
              }
            }
          ]
        },
        "tooltip": {
          "description": "Defines the tooltip of the link",
          "type": "string"
        },
        "type": {
          "description": "Defines the type of the displayed information. Some of the types are deprecated",
          "type": "string",
          "oneOf": [
            {
              "enum": ["Default", "NumericData", "Status", "IconGroup", "ComboBox", "TextArea", "Input", "Duration", "DateRange", "RatingIndicator", "phone", "email", "link", "text", "Image"],
              "default": "Default"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "url": {
          "description": "[Deprecated] Defines the URL string. Works only with items of type 'link'",
          "deprecated": true,
          "type": "string"
        },
        "target": {
          "description": "[Deprecated] Specifies the target of the link - it works like the target property of the HTML 'a' tag. Works only with items of type 'link'",
          "deprecated": true,
          "oneOf": [
            {
              "$ref": "#/$defs/target"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "emailSubject": {
          "description": "[Deprecated] Represents the subject of the email. Works only with item of type 'email'",
          "deprecated": true,
          "type": "string"
        },
        "actions": {
          "description": "Defines actions that can be applied on the group item",
          "type": "array",
          "items": {
            "$ref": "#/$defs/action"
          }
        },
        "visible": {
          "description": "Represents the visibility state of the item",
          "$ref": "#/$defs/visibility"
        },
        "mainIndicator": {
          "description": "[Experimental]",
          "$ref": "#/$defs/ContentType.Object.Item.MainIndicator"
        },
        "sideIndicators": {
          "description": "[Experimental] Multiple side indicators that relate to the main numeric indicator",
          "type": "array",
          "maxItems": 2,
          "items": {
            "$ref": "#/$defs/HeaderType.Numeric.SideIndicator"
          }
        },
        "sideIndicatorsAlignment": {
          "description": "[Experimental] The alignment of the side indicators",
          "type": "string",
          "oneOf": [
            {
              "enum": ["Begin", "End"],
              "default": "Begin"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "template": {
          "description": "[Experimental] Template definition for the icons in the group",
          "$ref": "#/$defs/ContentType.Object.Item.IconGroupTemplate"
        },
        "path": {
          "description": "[Experimental] Binding path to the icon data",
          "type": "string"
        },
        "size": {
          "description": "[Experimental] The size of the icons in an IconGroup",
          "oneOf": [
            {
              "enum": ["XS", "S", "M"],
              "default": "XS"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "maxLines": {
          "description": "Maximum number of lines",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "details": {
          "description": "Represents additional information about the numeric indicators",
          "type": "string"
        },
        "state": {
          "description": "The state color of the item",
          "$ref": "#/$defs/state"
        },
        "showStateIcon": {
          "description": "Defines if a default state icon is shown",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "customStateIcon": {
          "description": "The custom state icon",
          "type": "string"
        },
        "id": {
          "description": "ID for input fields",
          "type": "string"
        },
        "selectedKey": {
          "description": "Defines the initially selected key from the given options for combo box.",
          "type": "string"
        },
        "placeholder": {
          "description": "Placeholder for input fields",
          "type": "string"
        },
        "rows": {
          "description": "Property rows for TextArea",
          "type": "number"
        },
        "item": {
          "type": "object",
          "description": "Binding info for combo box items",
          "required": ["template"],
          "additionalProperties": false,
          "properties": {
            "template": {
              "$ref": "#/$defs/ContentType.Object.Item.ComboBoxItemTemplate"
            },
            "path": {
              "description": "Defines the path to the structure holding the data about the items",
              "type": "string",
              "default": "/",
              "pattern": "^[a-zA-Z0-9_\\.\\-/|@#]*$"
            }
          }
        },
        "validations": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ContentType.Object.Item.Validation"
          }
        },
        "maxValue": {
          "description": "The number of displayed symbols for RatingIndicator",
          "oneOf": [
            {
              "type": "number",
              "default": 5
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "visualMode": {
          "description": "Defines how float values are visualized for RatingIndicator: Full (values are rounded to the nearest integer value (e.g. 1.7 -> 2)) or  Half (values are rounded to the nearest half value (e.g. 1.7 -> 1.5))",
          "oneOf": [
            {
              "enum": ["Full", "Half"],
              "default": "Half"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "src": {
          "type": "string",
          "description": "Represents image source URL"
        },
        "fallbackSrc": {
          "type": "string",
          "description": "Represents fallback image source URL"
        },
        "alt": {
          "type": "string",
          "description": "The alternative text that is displayed in case the image is not available, or cannot be displayed."
        },
        "fullWidth": {
          "description": "Defines if the image will take the full width of the group, including the paddings. If set to false there will be padding. For best result use together with 'alignment': 'Stretched' for the group",
          "oneOf": [
            {
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "height": {
          "description": "The height of the image",
          "type": "string"
        },
        "imageFit": {
          "description": "This property is for adjusting the image size using the CSS style <code>background-size</code>.",
          "type": "string"
        },
        "imagePosition": {
          "description": "This property is for adjusting the image position using the CSS style <code>background-position</code>.",
          "type": "string"
        },
        "overlay": {
          "description": "Overlay on the Image",
          "type": "object",
          "properties": {
            "supertitle": {
              "description": "The text before the title",
              "type": "string"
            },
            "title": {
              "description": "The title",
              "type": "string"
            },
            "subTitle": {
              "description": "The subTitle",
              "type": "string"
            },
            "verticalPosition": {
              "description": "The vertical alignment of the texts",
              "type": "string"
            },
            "horizontalPosition": {
              "description": "The horizontal alignment of the texts",
              "type": "string"
            },
            "padding": {
              "description": "Set to 'MediumStart' to have medium size padding in the beginning of the texts.",
              "type": "string"
            },
            "textColor": {
              "description": "The color of the texts",
              "type": "string"
            },
            "textFilter": {
              "description": "The CSS filter which will be applied to the text.",
              "type": "string"
            },
            "background": {
              "description": "The background behind the texts and over the image",
              "type": "string"
            },
            "animation": {
              "description": "Defines the animation that should be used to show up the overlay.",
              "type": "string"
            }
          }
        }
      }
    },
    "ContentType.Object.Group": {
      "description": "Represents a group of information for an object",
      "type": "object",
      "required": ["items"],
      "additionalProperties": false,
      "properties": {
        "title": {
          "description": "Represents a title of the object group; to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
          "$ref": "#/$defs/i18n_key_string",
          "i18n": {
            "type": "XGRP",
            "comment": "Object group title"
          }
        },
        "titleMaxLines": {
          "description": "[Experimental] Limits the number of lines for wrapping the group title.",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ],
          "default": 1
        },
        "labelWrapping": {
          "description": "[Experimental] Determines whether the labels of the group items will be wrapped.",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ],
          "default": false
        },
        "items": {
          "description": "Represents items of information",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ContentType.Object.Item"
          }
        },
        "visible": {
          "description": "Represents the visibility state of the group",
          "$ref": "#/$defs/visibility"
        },
        "alignment": {
          "description": "[Experimental] Alignment of the group",
          "enum": ["Default", "Stretch"],
          "default": "Default"
        }
      }
    },
    "simpleIcon": {
      "description": "Represents simple icon attributes",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "src": {
          "type": "string",
          "description": "Represents icon name or source URL"
        },
        "visible": {
          "description": "Represents the visibility state of the icon",
          "$ref": "#/$defs/visibility"
        }
      }
    },
    "ContentType.Timeline.Item": {
      "description": "Represents a single timeline item",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "title": {
          "description": "The title of the timeline item",
          "$ref": "#/$defs/field"
        },
        "description": {
          "description": "The description of the timeline item",
          "$ref": "#/$defs/field"
        },
        "dateTime": {
          "description": "The dateTime value of the timeline item",
          "$ref": "#/$defs/field"
        },
        "owner": {
          "description": "The owner of the timeline item",
          "$ref": "#/$defs/field"
        },
        "ownerImage": {
          "description": "The owner image of the timeline item",
          "properties": {
            "value": {
              "type": "string"
            }
          }
        },
        "icon": {
          "description": "The icon of the timeline item",
          "$ref": "#/$defs/simpleIcon"
        },
        "actions": {
          "description": "Defines actions that can be applied on the item level",
          "type": "array",
          "items": {
            "$ref": "#/$defs/action"
          }
        }
      }
    },
    "ContentType.Analytical.Field": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "description": "The type of the feed",
          "oneOf": [
            {
              "enum": ["Measure", "Dimension"]
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "uid": {
          "description": "The uid of the feed",
          "type": "string"
        },
        "values": {
          "description": "The names of the measures or dimensions that are used for this feed",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ContentType.Analytical.Measure": {
      "description": "Measure for the dataset",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "The name of the measure",
          "type": "string"
        },
        "label": {
          "description": "[Deprecated] Label for the measure",
          "deprecated": true,
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "Binding path to the data"
        }
      }
    },
    "ContentType.Analytical.Dimension": {
      "description": "Dimension for the dataset",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "The name of the dimension",
          "type": "string"
        },
        "label": {
          "description": "[Deprecated] Label for the dimension",
          "deprecated": true,
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "Binding path to the data"
        },
        "displayValue": {
          "type": "string",
          "description": "Display value for the dimension. It doesn't work with 'waterfallType'"
        },
        "dataType": {
          "type": "string",
          "description": "Data type of the dimension as displayed in the chart. Currently only in time series chart, it is required to set data type to 'date' if this column is going to feed the 'timeAxis'",
          "oneOf": [
            {
              "enum": ["string", "number", "date"],
              "default": "string"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        }
      }
    },
    "ContentType.Analytical.AxisText": {
      "description": "Represents descriptive text of the axis",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "visible": {
          "description": "Represents the visibility state of the descriptive axis text",
          "$ref": "#/$defs/visibility"
        }
      }
    },
    "ContentType.Analytical.DataLabel": {
      "description": "Represents value attributes in the plot area",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "visible": {
          "description": "Visibility of the data labels",
          "$ref": "#/$defs/visibility"
        },
        "showTotal": {
          "description": "Visibility of data label for total value in some charts",
          "$ref": "#/$defs/visibility"
        }
      }
    },
    "ContentType.Analytical.Legend": {
      "description": "[Deprecated] Represents chart legend attributes",
      "deprecated": true,
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "visible": {
          "description": "Defines whether the legend will be visible",
          "$ref": "#/$defs/visibility"
        },
        "position": {
          "description": "Defines where the legend will be positioned",
          "type": "string",
          "oneOf": [
            {
              "enum": ["Top", "Bottom", "Left", "Right"],
              "default": "Right"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "alignment": {
          "description": "Defines how the legend will be aligned",
          "type": "string",
          "oneOf": [
            {
              "enum": ["TopLeft", "Center"],
              "default": "TopLeft"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        }
      }
    },
    "icon": {
      "description": "Represents icon attributes",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "src": {
          "type": "string",
          "description": "Represents icon name or source URL"
        },
        "alt": {
          "type": "string",
          "description": "Alternative text for the icon"
        },
        "shape": {
          "type": "string",
          "description": "Represents the shape of the icon",
          "oneOf": [
            {
              "enum": ["Square", "Circle"],
              "default": "Circle"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "text": {
          "description": "[Deprecated] Initials for the avatar. Up to 2 symbols. If the image provided to the 'src' property fails to load, then the text will be shown",
          "deprecated": true,
          "type": "string"
        },
        "initials": {
          "description": "Used as fallback if the 'src' property is not set or there is an issue with the resource. Up to two Latin letters can be displayed",
          "type": "string"
        },
        "size": {
          "description": "[Experimental] The size of the icon",
          "oneOf": [
            {
              "enum": ["XS", "S", "M"]
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "fitType": {
          "description": "Defines how the image fits in the icon area",
          "oneOf": [
            {
              "enum": ["Cover", "Contain"],
              "default": "Cover"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "backgroundColor": {
          "$ref": "#/$defs/iconBackgroundColor"
        },
        "visible": {
          "description": "Represents the visibility state of the icon",
          "$ref": "#/$defs/visibility"
        }
      }
    },
    "state": {
      "description": "Represents state of an entity",
      "type": "string",
      "enum": ["Error", "Success", "Warning", "None", "Information"],
      "default": "None"
    },
    "ContentType.List.Item.ValueStateItem": {
      "description": "Represents value and state information for an object",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "value": {
          "type": "string",
          "description": "The value of the field"
        },
        "state": {
          "description": "The state of the field",
          "oneOf": [
            {
              "$ref": "#/$defs/state"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "showStateIcon": {
          "description": "Defines if a default state icon is shown",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "customStateIcon": {
          "description": "The custom state icon",
          "type": "string"
        },
        "visible": {
          "description": "Visibility of the item",
          "$ref": "#/$defs/visibility"
        },
        "title": {
          "description": "Title of the data point. This is just a placeholder to store the title, title will not be rendered on the screen. This is needed to prevent the loss of columnn names while transforming table card to list card.",
          "type": "string"
        }
      }
    },
    "field": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "label": {
          "description": "Represents a label of the field; to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
          "$ref": "#/$defs/i18n_key_string",
          "i18n": {
            "type": "XFLD",
            "comment": "Field label"
          }
        },
        "value": {
          "type": "string",
          "description": "The value of the field"
        },
        "visible": {
          "description": "Represents the visibility of the field",
          "$ref": "#/$defs/visibility"
        }
      }
    },
    "group": {
      "description": "Represents group of items",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "title": {
          "description": "The title of the group",
          "type": "string"
        },
        "order": {
          "description": "The order by which the group will be sorted",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "path": {
              "description": "Defines the path to the structure holding the data about the group order",
              "type": "string"
            },
            "dir": {
              "description": "The sorting direction in which the group items will be ordered",
              "oneOf": [
                {
                  "enum": ["ASC", "DESC"],
                  "default": "ASC"
                }
              ]
            }
          }
        }
      }
    },
    "ContentType.List.Item": {
      "description": "The template for all items",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "title": {
          "description": "The title of the item",
          "oneOf": [
            {
              "$ref": "#/$defs/field"
            },
            {
              "type": "string"
            }
          ]
        },
        "description": {
          "description": "The description of the item",
          "oneOf": [
            {
              "$ref": "#/$defs/field"
            },
            {
              "type": "string"
            }
          ]
        },
        "info": {
          "description": "Defines an additional information text",
          "$ref": "#/$defs/ContentType.List.Item.ValueStateItem"
        },
        "highlight": {
          "type": "string",
          "description": "The highlight state of the item",
          "oneOf": [
            {
              "$ref": "#/$defs/state"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "highlightText": {
          "type": "string",
          "description": "Defines the semantics of the 'highlight' property. It is used for accessibility purposes."
        },
        "icon": {
          "$ref": "#/$defs/icon"
        },
        "attributesLayoutType": {
          "description": "Defines the layout type of the attributes",
          "oneOf": [
            {
              "enum": ["OneColumn", "TwoColumns"],
              "default": "TwoColumns"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "attributes": {
          "description": "Defines the attributes",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ContentType.List.Item.ValueStateItem"
          }
        },
        "actions": {
          "description": "Defines actions that can be applied on the item",
          "type": "array",
          "items": {
            "$ref": "#/$defs/action"
          }
        },
        "chart": {
          "$ref": "#/$defs/MicroChart"
        },
        "actionsStrip": {
          "description": "Describes actions strip",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/actionsStripItem"
              }
            },
            {
              "$ref": "#/$defs/actionsStrip"
            }
          ]
        }
      }
    },
    "minHeight": {
      "description": "Defines the min-height of the Content as a CSS value",
      "type": "string"
    },
    "Enums.ValueColor": {
      "enum": ["Critical", "Error", "Good", "Neutral"],
      "default": "Neutral"
    },
    "MicroChart": {
      "description": "[Experimental] Describes MicroChart attributes",
      "oneOf": [
        {
          "$ref": "#/$defs/MicroChart.Generic"
        },
        {
          "$ref": "#/$defs/MicroChart.Bullet"
        },
        {
          "$ref": "#/$defs/MicroChart.StackedBar"
        }
      ]
    },
    "HeaderType.Numeric.SideIndicator": {
      "description": "Represents side indicator attributes which are used for additional information about the main indicator",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "title": {
          "description": "Represents a title of the side indicator",
          "type": "string"
        },
        "number": {
          "description": "Represents value of the side indicator",
          "type": "string"
        },
        "unit": {
          "description": "Represents unit of measurement of the side indicator",
          "type": "string"
        },
        "state": {
          "description": "The state color of the side indicator",
          "type": "string",
          "oneOf": [
            {
              "description": "The state color of the side indicator",
              "$ref": "#/$defs/Enums.ValueColor"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "visible": {
          "description": "Visibility of the side indicator",
          "$ref": "#/$defs/visibility"
        }
      }
    },
    "HeaderType.Numeric.MainIndicator": {
      "description": "Represents the main numeric indicator of the header",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "number": {
          "description": "The value of the main indicator",
          "type": "string"
        },
        "unit": {
          "description": "The unit of the main indicator",
          "type": "string"
        },
        "trend": {
          "description": "The trend indicator (direction)",
          "type": "string",
          "oneOf": [
            {
              "enum": ["Down", "None", "Up"],
              "default": "None"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "state": {
          "description": "The state color of the main indicator",
          "type": "string",
          "oneOf": [
            {
              "description": "The state color of the main indicator",
              "$ref": "#/$defs/Enums.ValueColor"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "visible": {
          "description": "Visibility of the main indicator",
          "$ref": "#/$defs/visibility"
        }
      }
    },
    "wrappingType": {
      "description": "The wrapping type for texts",
      "type": "string",
      "oneOf": [
        {
          "enum": ["Normal", "Hyphenated"],
          "default": "Normal"
        },
        {
          "$ref": "#/$defs/simpleBinding"
        }
      ]
    },
    "status": {
      "description": "Represents status attributes",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "text": {
          "description": "Represents status text",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/statusTextFormatter"
            }
          ]
        },
        "visible": {
          "description": "Represents the visibility of the status text",
          "$ref": "#/$defs/visibility"
        }
      }
    },
    "iconWithoutSize": {
      "description": "Represents icon attributes",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "src": {
          "type": "string",
          "description": "Represents icon name or source URL"
        },
        "alt": {
          "type": "string",
          "description": "Alternative text for the icon"
        },
        "shape": {
          "type": "string",
          "description": "Represents the shape of the icon",
          "oneOf": [
            {
              "enum": ["Square", "Circle"],
              "default": "Circle"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "text": {
          "description": "[Deprecated] Initials for the avatar. Up to 2 symbols. If the image provided to the 'src' property fails to load, then the text will be shown",
          "deprecated": true,
          "type": "string"
        },
        "initials": {
          "description": "Used as fallback if the 'src' property is not set or there is an issue with the resource. Up to two Latin letters can be displayed",
          "type": "string"
        },
        "backgroundColor": {
          "$ref": "#/$defs/iconBackgroundColor"
        },
        "fitType": {
          "description": "Defines how the image fits in the icon area",
          "oneOf": [
            {
              "enum": ["Cover", "Contain"],
              "default": "Cover"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "visible": {
          "description": "Visibility of the icon",
          "$ref": "#/$defs/visibility"
        }
      }
    },
    "action": {
      "description": "Represents actions that can be applied on card elements",
      "type": "object",
      "required": ["type"],
      "additionalProperties": false,
      "properties": {
        "type": {
          "description": "The type of the action",
          "type": "string",
          "oneOf": [
            {
              "enum": ["Custom", "Navigation", "Submit", "ShowCard", "HideCard"]
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "enabled": {
          "description": "Represents the state of the action",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "service": {
          "$ref": "#/$defs/service"
        },
        "url": {
          "description": "[Deprecated] Represents the URL that will be used as navigation target if no service is provided",
          "deprecated": true,
          "type": "string"
        },
        "parameters": {
          "description": "Parameters passed to the navigation action handler"
        },
        "target": {
          "description": "[Deprecated] Specifies where to open the 'url', if it is provided",
          "deprecated": true,
          "type": "string",
          "oneOf": [
            {
              "$ref": "#/$defs/target"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "Custom"
              }
            }
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/customActionParameters"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Navigation"
              }
            }
          },
          "then": {
            "properties": {
              "parameters": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/navigationActionParameters"
                  },
                  {
                    "$ref": "#/$defs/navigationActionIBParameters"
                  }
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "Submit"
              }
            }
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/submitActionParameters"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ShowCard"
              }
            }
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/showCardActionParameters"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "HideCard"
              }
            }
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/hideCardActionParameters"
              }
            }
          }
        }
      ]
    },
    "HeaderType.Numeric": {
      "additionalProperties": false,
      "required": ["type"],
      "description": "Represents header with numeric data",
      "type": "object",
      "properties": {
        "type": {
          "description": "Represents the type of the header",
          "type": "string",
          "enum": ["Numeric"]
        },
        "title": {
          "description": "Represents a title of the header; to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
          "$ref": "#/$defs/i18n_key_string",
          "i18n": {
            "type": "XTIT",
            "comment": "Header title"
          }
        },
        "titleMaxLines": {
          "description": "[Experimental] Limit the number of lines for the title.",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ],
          "default": 3
        },
        "subTitle": {
          "description": "Represents a subtitle to the title; to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
          "$ref": "#/$defs/i18n_key_string",
          "i18n": {
            "type": "XTIT",
            "comment": "Header subtitle"
          }
        },
        "subTitleMaxLines": {
          "description": "[Experimental] Limit the number of lines for the sub title.",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ],
          "default": 2
        },
        "actions": {
          "description": "Represents a description of the actions that can be applied on a part of a card",
          "type": "array",
          "items": {
            "$ref": "#/$defs/action"
          }
        },
        "data": {
          "$ref": "#/$defs/data"
        },
        "unitOfMeasurement": {
          "description": "Represents unit of measurement for the whole numeric header",
          "type": "string"
        },
        "mainIndicator": {
          "$ref": "#/$defs/HeaderType.Numeric.MainIndicator"
        },
        "sideIndicatorsAlignment": {
          "description": "The alignment of the side indicators",
          "type": "string",
          "oneOf": [
            {
              "enum": ["Begin", "End"],
              "default": "Begin"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "details": {
          "description": "Represents additional information about the numeric header",
          "type": "string"
        },
        "detailsMaxLines": {
          "description": "[Experimental] Limit the number of lines for the details text.",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ],
          "default": 1
        },
        "sideIndicators": {
          "description": "Multiple side indicators that relate to the main numeric indicator",
          "type": "array",
          "maxItems": 2,
          "items": {
            "$ref": "#/$defs/HeaderType.Numeric.SideIndicator"
          }
        },
        "status": {
          "description": "Represents the status of the card",
          "$ref": "#/$defs/status"
        },
        "closeButton": {
          "description": "[Experimental] Represents the Close button when a card is opened by the ShowCard action.",
          "$ref": "#/$defs/closeButton",
          "deprecated": true
        },
        "wrappingType": {
          "description": "[Experimental] The wrapping type for texts inside the header.",
          "$ref": "#/$defs/wrappingType"
        },
        "visible": {
          "description": "[Experimental] Visibility of the header",
          "$ref": "#/$defs/visibility"
        },
        "chart": {
          "$ref": "#/$defs/MicroChart"
        }
      }
    },
    "HeaderType.Default": {
      "additionalProperties": false,
      "description": "Represents default header attributes",
      "type": "object",
      "properties": {
        "type": {
          "description": "Represents the type of the header",
          "type": "string",
          "enum": ["Default"]
        },
        "title": {
          "description": "Represents a title of the header; to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
          "$ref": "#/$defs/i18n_key_string",
          "i18n": {
            "type": "XTIT",
            "comment": "Header title"
          }
        },
        "titleMaxLines": {
          "description": "[Experimental] Limit the number of lines for the title.",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ],
          "default": 3
        },
        "subTitle": {
          "description": "Represents a subtitle to the title; to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
          "$ref": "#/$defs/i18n_key_string",
          "i18n": {
            "type": "XTIT",
            "comment": "Header subtitle"
          }
        },
        "subTitleMaxLines": {
          "description": "[Experimental] Limit the number of lines for the sub title.",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ],
          "default": 2
        },
        "actions": {
          "description": "Represents a description of the actions that can be applied on a part of a card",
          "type": "array",
          "items": {
            "$ref": "#/$defs/action"
          }
        },
        "data": {
          "$ref": "#/$defs/data"
        },
        "icon": {
          "description": "Represents the icon of the card",
          "$ref": "#/$defs/iconWithoutSize"
        },
        "status": {
          "description": "Represents the status of the card",
          "$ref": "#/$defs/status"
        },
        "closeButton": {
          "description": "[Experimental] Represents the Close button when a card is opened by the ShowCard action.",
          "$ref": "#/$defs/closeButton",
          "deprecated": true
        },
        "wrappingType": {
          "description": "[Experimental] The wrapping type for texts inside the header.",
          "$ref": "#/$defs/wrappingType"
        },
        "visible": {
          "description": "[Experimental] Visibility of the header",
          "$ref": "#/$defs/visibility"
        }
      }
    },
    "ContentType.WebPage": {
      "description": "WebPage content is used to embed HTML page",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/$defs/data"
        },
        "minHeight": {
          "$ref": "#/$defs/minHeight"
        },
        "src": {
          "description": "URL of the web page to be embedded",
          "type": "string"
        },
        "sandbox": {
          "description": "Sandbox attribute of the iframe",
          "type": "string"
        },
        "allow": {
          "description": "Allow attribute of the iframe",
          "type": "string"
        },
        "allowFullscreen": {
          "description": "AllowFullscreen attribute of the iframe",
          "oneOf": [
            {
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "omitSandbox": {
          "description": "If set to 'true' the 'sandbox' attribute will not be added to the iframe.",
          "oneOf": [
            {
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        }
      }
    },
    "ContentType.AdaptiveCard": {
      "description": "Represents AdaptiveCard content",
      "$ref": "https://adaptivecards.io/schemas/adaptive-card.json#/definitions/AdaptiveCard"
    },
    "ContentType.Calendar": {
      "description": "The calendar card is used to display a schedule of a single entity (such as person, resource) for a selected time interval",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/$defs/data"
        },
        "item": {
          "$ref": "#/$defs/ContentType.Calendar.Item"
        },
        "legendItem": {
          "$ref": "#/$defs/ContentType.Calendar.LegendItem"
        },
        "specialDate": {
          "$ref": "#/$defs/ContentType.Calendar.SpecialDate"
        },
        "date": {
          "description": "The initial date of the calendar which appointments are initially shown. The accepted date format is ISO 8601",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "maxItems": {
          "description": "Represents number of items displayed",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "maxLegendItems": {
          "description": "Represents number of legendItems displayed",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "noItemsText": {
          "description": "The text shown when there are no items for the selected day",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "use12HourFormat": {
          "description": "Displays the time for calendar appointments in either 12h or 24h formats. By default, time is displayed in 24h format.",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "calendarWeekNumbering": {
          "description": "Set the first day of week based on one of the available options Default, ISO_8601, MiddleEastern, or WesternTraditional.",
          "oneOf": [
            {
              "enum": ["Default", "ISO_8601", "MiddleEastern", "WesternTraditional"],
              "default": "Default"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "moreItems": {
          "description": "Defines actions that can be applied on the button showing there are more items than the shown",
          "type": "object",
          "properties": {
            "actions": {
              "description": "Represents an action that can be applied on he button showing there are more items than the shown",
              "type": "array",
              "items": {
                "$ref": "#/$defs/action"
              }
            }
          }
        }
      }
    },
    "ContentType.Component": {
      "description": "Represents the configuration for a component card's content",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "minHeight": {
          "$ref": "#/$defs/minHeight"
        }
      }
    },
    "ContentType.Object": {
      "description": "Represents object content attributes",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/$defs/data"
        },
        "groups": {
          "description": "Represents groups of information for an object",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ContentType.Object.Group"
          }
        },
        "actions": {
          "description": "Defines actions that can be applied on the content",
          "type": "array",
          "items": {
            "$ref": "#/$defs/action"
          }
        },
        "hasData": {
          "description": "Represents flag for no data",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "object"
            },
            {
              "type": "array"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ],
          "default": true
        }
      }
    },
    "ContentType.Table": {
      "description": "Represents table content attributes",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/$defs/data"
        },
        "row": {
          "description": "The template for all rows",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "columns": {
              "description": "Defines the columns attributes",
              "type": "array",
              "items": {
                "$ref": "#/$defs/ContentType.Table.Column"
              }
            },
            "actions": {
              "description": "Defines actions that can be applied on the item",
              "type": "array",
              "items": {
                "$ref": "#/$defs/action"
              }
            },
            "highlight": {
              "type": "string",
              "description": "The highlight state of the row",
              "oneOf": [
                {
                  "$ref": "#/$defs/state"
                },
                {
                  "$ref": "#/$defs/simpleBinding"
                }
              ]
            },
            "highlightText": {
              "type": "string",
              "description": "Defines the semantics of the 'highlight' property. It is used for accessibility purposes."
            }
          }
        },
        "maxItems": {
          "description": "Represents number of items",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "minItems": {
          "description": "Represents the minimum expected number of items",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "group": {
          "$ref": "#/$defs/group"
        }
      }
    },
    "ContentType.Timeline": {
      "description": "Represents time related content",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/$defs/data"
        },
        "item": {
          "description": "Defines the timeline item",
          "$ref": "#/$defs/ContentType.Timeline.Item"
        },
        "maxItems": {
          "description": "Represents number of items",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "minItems": {
          "description": "Represents the minimum expected number of items",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        }
      }
    },
    "ContentType.AnalyticsCloud": {
      "description": "Represents SAP Analytics Cloud content attributes",
      "type": "object",
      "additionalProperties": true
    },
    "ContentType.Analytical": {
      "description": "Represents analytical content attributes",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/$defs/data"
        },
        "chartType": {
          "description": "The type of the chart",
          "type": "string",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "chartProperties": {
          "description": "[Experimental] Chart configuration",
          "oneOf": [
            {
              "type": "object"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "minHeight": {
          "$ref": "#/$defs/minHeight"
        },
        "legend": {
          "$ref": "#/$defs/ContentType.Analytical.Legend"
        },
        "plotArea": {
          "description": "[Deprecated] Describes the plotArea properties",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "dataLabel": {
              "$ref": "#/$defs/ContentType.Analytical.DataLabel"
            },
            "categoryAxisText": {
              "$ref": "#/$defs/ContentType.Analytical.AxisText"
            },
            "valueAxisText": {
              "$ref": "#/$defs/ContentType.Analytical.AxisText"
            }
          },
          "deprecated": true
        },
        "title": {
          "description": "[Deprecated] Represents title attributes",
          "deprecated": true,
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "visible": {
              "description": "Represents the visibility state of the title",
              "$ref": "#/$defs/visibility"
            },
            "text": {
              "description": "Represents a title text",
              "type": "string"
            },
            "alignment": {
              "description": "Represents the title alignment",
              "oneOf": [
                {
                  "enum": ["Left", "Center", "Right"],
                  "default": "Center"
                },
                {
                  "$ref": "#/$defs/simpleBinding"
                }
              ]
            }
          }
        },
        "measureAxis": {
          "description": "[Deprecated] Represents the value set for measure axis",
          "deprecated": true,
          "type": "string"
        },
        "dimensionAxis": {
          "description": "[Deprecated] Represents the value set for dimension axis",
          "deprecated": true,
          "type": "string"
        },
        "dimensions": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ContentType.Analytical.Dimension"
          }
        },
        "measures": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/ContentType.Analytical.Measure"
          }
        },
        "feeds": {
          "description": "Feeds for the chart",
          "type": "array",
          "items": {
            "$ref": "#/$defs/ContentType.Analytical.Field"
          }
        },
        "actions": {
          "description": "Defines actions that can be applied on the content",
          "type": "array",
          "items": {
            "$ref": "#/$defs/action"
          }
        },
        "actionableArea": {
          "oneOf": [
            {
              "enum": ["Full", "Chart"],
              "default": "Full"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "popover": {
          "type": "object",
          "additionalProperties": false,
          "description": "Configuration for a popover, which will open while pressing chart points",
          "properties": {
            "active": {
              "description": "Whether the popover is connected to the chart. If it's not it won't open",
              "oneOf": [
                {
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/simpleBinding"
                }
              ]
            },
            "actionsStrip": {
              "description": "Defines actions items that can be triggered when the action button is pressed",
              "type": "array",
              "maxItems": 1,
              "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "actions": {
                    "description": "Defines actions that will be triggered when the action button is pressed",
                    "type": "array",
                    "items": {
                      "$ref": "#/$defs/action"
                    }
                  },
                  "text": {
                    "type": "string",
                    "description": "The action button text"
                  }
                }
              }
            }
          }
        }
      }
    },
    "ContentType.List": {
      "description": "Represents list content attributes",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/$defs/data"
        },
        "item": {
          "$ref": "#/$defs/ContentType.List.Item"
        },
        "maxItems": {
          "description": "Represents number of items",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "minItems": {
          "description": "Represents the minimum expected number of items",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "group": {
          "$ref": "#/$defs/group"
        }
      }
    },
    "closeButton": {
      "description": "[Experimental] Represents attributes of the Close button",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "visible": {
          "description": "[Experimental] Represents the visibility of the Close button",
          "$ref": "#/$defs/visibility"
        }
      }
    },
    "visibility": {
      "oneOf": [
        {
          "type": "boolean",
          "default": true
        },
        {
          "$ref": "#/$defs/simpleBinding"
        }
      ]
    },
    "actionsStrip": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "item": {
          "$ref": "#/$defs/actionsStripItemBindingInfo"
        }
      }
    },
    "actionsStripItem": {
      "description": "Attributes of actions strip item",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "actions": {
          "description": "Action(s) which will be executed when button is pressed",
          "type": "array",
          "items": {
            "$ref": "#/$defs/action"
          }
        },
        "type": {
          "description": "The type of the item",
          "oneOf": [
            {
              "enum": ["Button", "ToolbarSpacer", "Link", "Label"],
              "default": "Button"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "overflowPriority": {
          "description": "Defines items priority",
          "oneOf": [
            {
              "enum": ["AlwaysOverflow", "Disappear", "High", "Low", "NeverOverflow"],
              "default": "High"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "icon": {
          "description": "The icon of the item",
          "type": "string"
        },
        "text": {
          "description": "The text of the item",
          "type": "string"
        },
        "tooltip": {
          "description": "The tooltip of the item",
          "type": "string"
        },
        "buttonType": {
          "description": "The type of the button",
          "oneOf": [
            {
              "enum": ["Accept", "Attention", "Back", "Critical", "Default", "Emphasized", "Ghost", "Negative", "Neutral", "Reject", "Success", "Transparent", "Unstyled", "Up"],
              "default": "Default"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "ariaHasPopup": {
          "description": "Use this property only when the item is related to a popover/popup",
          "oneOf": [
            {
              "enum": ["Dialog", "Grid", "ListBox", "Menu", "None", "Tree"],
              "default": "None"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "visible": {
          "description": "Determines whether the item is visible",
          "$ref": "#/$defs/visibility"
        }
      }
    },
    "HeaderType": {
      "oneOf": [
        {
          "$ref": "#/$defs/HeaderType.Default"
        },
        {
          "$ref": "#/$defs/HeaderType.Numeric"
        }
      ]
    },
    "data": {
      "description": "Represents request and response attributes",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "request": {
          "$ref": "#/$defs/request"
        },
        "path": {
          "description": "The path from the JSON to be used as root",
          "type": "string",
          "default": "/",
          "pattern": "^[a-zA-Z0-9_\\.\\-/|@#]*$"
        },
        "json": {
          "description": "The data to be used directly. Without making requests",
          "type": ["object", "array"],
          "additionalProperties": true
        },
        "service": {
          "$ref": "#/$defs/service"
        },
        "updateInterval": {
          "description": "Represents interval in seconds, after which a new data request will be triggered",
          "oneOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "extension": {
          "$ref": "#/$defs/extension"
        },
        "name": {
          "description": "[Experimental] Gives a name to the data section. A model with the same name will be assigned to the card",
          "type": "string"
        },
        "mockData": {
          "description": "[Experimental] Mock data attributes",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "request": {
              "$ref": "#/$defs/request"
            },
            "json": {
              "description": "The data to be used directly. Without making requests",
              "type": ["object", "array"],
              "additionalProperties": true
            },
            "extension": {
              "$ref": "#/$defs/extension"
            }
          }
        }
      }
    },
    "Configuration.NoData": {
      "description": "Represents a configuration for a NoData",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "title": {
          "description": "Title shown in the illustrated message of the card",
          "type": "string"
        },
        "description": {
          "description": "Description shown in the illustrated message of the card",
          "type": "string"
        },
        "size": {
          "description": "Defines the size predefined from sap.m.IllustratedMessage",
          "type": "string"
        },
        "type": {
          "description": "Defines the image predefined from sap.m.IllustratedMessage",
          "type": "string"
        }
      }
    },
    "Configuration.CSRFToken": {
      "description": "Represents a configuration for a CSRF token",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/$defs/data"
        }
      }
    },
    "Configuration.Destinations": {
      "description": "Represents a configuration for a cloud platform destination",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "The name of the destination. Use the same name which is used in Cloud Platform",
          "type": "string"
        },
        "label": {
          "description": "Label for the destination for user-friendly visualization in the design-time editor",
          "type": "string"
        },
        "description": {
          "description": "Description of the destination for user-friendly visualization in the design-time editor",
          "type": "string"
        },
        "defaultUrl": {
          "description": "A default url which will be used if there is no Host associated with the card",
          "type": "string"
        }
      }
    },
    "Configuration.FilterType.ComboBox": {
      "description": "[Experimental] ComboBox filter",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "description": "The type of the filter",
          "oneOf": [
            {
              "const": "ComboBox"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "value": {
          "description": "The value of the filter"
        },
        "selectedKey": {
          "description": "Defines the initially selected key from the given options for combo box.",
          "type": "string"
        },
        "selectedIndex": {
          "description": "Specifies the index of the selected item. Index value for no selection is -1.",
          "oneOf": [
            {
              "type": "number",
              "default": -1
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "data": {
          "$ref": "#/$defs/data"
        },
        "label": {
          "description": "Label for the filter. Used by screen readers",
          "type": "string"
        },
        "placeholder": {
          "description": "The placeholder of the filter",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/Configuration.Filter.ComboBoxItem"
          }
        },
        "item": {
          "type": "object",
          "additionalProperties": false,
          "required": ["template"],
          "properties": {
            "template": {
              "$ref": "#/$defs/Configuration.Filter.ComboBoxItem"
            },
            "path": {
              "description": "Defines the path to the structure holding the data about the items",
              "type": "string",
              "default": "/",
              "pattern": "^[a-zA-Z0-9_\\.\\-/|@#]*$"
            }
          }
        },
        "group": {
          "$ref": "#/$defs/group"
        },
        "visible": {
          "description": "Determines whether the filter is visible",
          "$ref": "#/$defs/visibility"
        }
      }
    },
    "Configuration.FilterType.Search": {
      "description": "Search filter",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "description": "The type of the filter",
          "oneOf": [
            {
              "const": "Search"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "label": {
          "description": "Label for the filter. Used by screen readers",
          "type": "string"
        },
        "value": {
          "description": "The value of the filter",
          "type": "string"
        },
        "placeholder": {
          "description": "The placeholder of the filter",
          "type": "string"
        },
        "visible": {
          "description": "Determines whether the filter is visible",
          "$ref": "#/$defs/visibility"
        }
      }
    },
    "Configuration.FilterType.DateRange": {
      "description": "Date range filter",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "description": "The type of the filter",
          "oneOf": [
            {
              "const": "DateRange"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "label": {
          "description": "Label for the filter. Used by screen readers",
          "type": "string"
        },
        "value": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "option": {
              "description": "The date range option",
              "type": "string"
            },
            "values": {
              "type": "array"
            }
          }
        },
        "options": {
          "description": "Options that will appear in the dropdown",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "date",
              "today",
              "yesterday",
              "tomorrow",
              "dateRange",
              "dateTimeRange",
              "from",
              "to",
              "fromDateTime",
              "toDateTime",
              "yearToDate",
              "lastDays",
              "lastWeeks",
              "lastMonths",
              "lastQuarters",
              "lastYears",
              "nextDays",
              "nextWeeks",
              "nextMonths",
              "nextQuarters",
              "nextYears",
              "todayFromTo",
              "thisWeek",
              "lastWeek",
              "nextWeek",
              "specificMonth",
              "thisMonth",
              "lastMonth",
              "nextMonth",
              "thisQuarter",
              "lastQuarter",
              "nextQuarter",
              "quarter1",
              "quarter2",
              "quarter3",
              "quarter4",
              "thisYear",
              "lastYear",
              "nextYear",
              "dateTime"
            ]
          }
        },
        "visible": {
          "description": "Determines whether the filter is visible",
          "$ref": "#/$defs/visibility"
        }
      }
    },
    "Configuration.FilterType.Select": {
      "description": "Select filter",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "description": "The type of the filter",
          "oneOf": [
            {
              "const": "Select"
            },
            {
              "$ref": "#/$defs/simpleBinding"
            }
          ]
        },
        "value": {
          "description": "The value of the filter"
        },
        "data": {
          "$ref": "#/$defs/data"
        },
        "label": {
          "description": "Label for the filter. Used by screen readers",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/Configuration.Filter.Item"
          }
        },
        "item": {
          "type": "object",
          "required": ["template"],
          "properties": {
            "template": {
              "$ref": "#/$defs/Configuration.Filter.Item"
            },
            "path": {
              "description": "Defines the path to the structure holding the data about the items",
              "type": "string",
              "default": "/",
              "pattern": "^[a-zA-Z0-9_\\.\\-/|@#]*$"
            }
          }
        },
        "visible": {
          "description": "Determines whether the filter is visible",
          "$ref": "#/$defs/visibility"
        }
      }
    },
    "Configuration.Parameter": {
      "description": "Represents configuration parameter",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "value": {
          "description": "The value of the parameter"
        },
        "type": {
          "description": "The type of the value for the parameter",
          "$ref": "#/$defs/Configuration.BasicDataType"
        },
        "label": {
          "description": "Label for the parameter for user-friendly visualization in the design-time editor",
          "type": "string"
        },
        "description": {
          "description": "Description of the parameter for user-friendly visualization in the design-time editor",
          "type": "string"
        }
      }
    },
    "simpleBinding": {
      "type": "string",
      "pattern": "\\{.*\\}"
    },
    "definingRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": ["dataSource", "path"],
      "properties": {
        "dataSource": {
          "description": "Represents reference to dataSource under sap.app",
          "type": "string"
        },
        "path": {
          "description": "Represents path to the title collection",
          "type": "string"
        },
        "retrieveStreams": {
          "description": "Represents indicator whether streams should be retrieved",
          "type": "boolean",
          "default": false
        }
      }
    },
    "levelsDef": {
      "description": "Plot area is a parent property which defines multiple other properties for smoothness and marker size",
      "type": "array"
    },
    "resizableLayoutVariantCardProperties": {
      "required": ["col", "row", "colSpan", "rowSpan"],
      "description": "Represents the card properties is a layout variant",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "col": {
          "description": "Represents the grid column",
          "type": "integer"
        },
        "row": {
          "description": "Represents the grid row",
          "type": "integer"
        },
        "colSpan": {
          "description": "Represents the column span",
          "type": "integer"
        },
        "rowSpan": {
          "description": "Represents the row span",
          "type": "integer"
        },
        "visible": {
          "description": "Represents the visibility of the card",
          "type": "boolean",
          "default": true
        }
      }
    },
    "customActionsSetting": {
      "description": "Represents the properties for the custom actions in the Quick View Cards",
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "text": {
          "description": "Text displayed for extended actions in Quick View",
          "type": "string",
          "pattern": "^\\{\\{[^\\W\\.\\-][\\w\\.\\-]*\\}\\}$",
          "i18n": {
            "type": "XFLD",
            "comment": "Label for extended actions in Quick View Cards"
          }
        },
        "press": {
          "description": "Name of the press handler for extended actions in Quick View",
          "type": "string",
          "pattern": "^[^\\W\\.\\-][\\w\\.\\-]*$"
        },
        "position": {
          "description": "Position of extended actions in Quick View",
          "type": "integer"
        }
      }
    },
    "timeAxisDef": {
      "description": "Represents the configuration to customize the time axis",
      "type": "object",
      "properties": {
        "levels": {
          "$ref": "#/$defs/levelsDef"
        }
      }
    },
    "plotAreaDef": {
      "description": "Plot area is a parent property which defines multiple other properties for smoothness and marker size",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "isSmoothed": {
          "description": "Represents whether smoother curves are required or not",
          "type": "boolean",
          "default": false
        },
        "markerSize": {
          "description": "Represents the size of the markers in scatter plots",
          "type": "integer"
        },
        "dataLabel": {
          "type": "object",
          "description": "dataLabel is a parent property that defines other properties for type",
          "additionalProperties": false,
          "properties": {
            "type": {
              "description": "Defines whether to display percentage values or actual counts in the donut chart",
              "type": "string",
              "enum": ["value", "percentage"],
              "default": "value"
            }
          }
        }
      }
    },
    "objectStreamCardsSettingsDef": {
      "description": "Represents the Object Stream properties - properties that are passed to the Object Stream cards",
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "showFirstActionInFooter": {
          "description": "Represents the flag to show first action in footer of the Quickview cards",
          "type": "boolean",
          "default": false
        },
        "customActions": {
          "description": "Represents the custom actions in the Quick View Cards",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/$defs/customActionsSetting"
          }
        }
      }
    },
    "defaultSpanDef": {
      "description": "Represents the card default grid size in columns and rows",
      "oneOf": [
        {
          "type": "object",
          "additionalProperties": false,
          "required": ["cols", "rows"],
          "properties": {
            "cols": {
              "description": "Represents the number of the number of grid columns",
              "type": "integer"
            },
            "rows": {
              "description": "Represents the number of the number of grid rows",
              "type": "integer"
            },
            "showOnlyHeader": {
              "description": "Represents if user wants to show only header part of card in resizable layout",
              "type": "boolean",
              "default": false
            },
            "minimumTitleRow": {
              "description": "If user wants to show more text in title then he/she can configure no of lines to be shown in title(Maximum allowed 3 lines)",
              "type": "integer",
              "default": 1,
              "pattern": "^[1-3]$"
            },
            "minimumSubTitleRow": {
              "description": "If user wants to show more text in title then he/she can configure no of lines to be shown in sub-title(Maximum allowed 2 lines)",
              "type": "integer",
              "default": 1,
              "pattern": "^[12]$"
            }
          }
        },
        {
          "type": "string",
          "enum": ["auto"]
        }
      ]
    },
    "tab_setting": {
      "description": "Represents the tab specific properties - properties that are passed to a particular tab in a card",
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "annotationPath": {
          "description": "Represents the annotation path",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_\\.\\-\\|@#]*$"
        },
        "selectionAnnotationPath": {
          "description": "Represents the selection annotation path",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_\\.\\-\\|@#]*$"
        },
        "chartAnnotationPath": {
          "description": "Represents the chart annotation path",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_\\.\\-\\|@#]*$"
        },
        "presentationAnnotationPath": {
          "description": "Represents the presentation annotation path",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_\\.\\-\\|@#]*$"
        },
        "dataPointAnnotationPath": {
          "description": "Represents the data point annotation path",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_\\.\\-\\|@#]*$"
        },
        "identificationAnnotationPath": {
          "description": "Represents the identification annotation path",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_\\.\\-\\|@#]*$"
        },
        "dynamicSubtitleAnnotationPath": {
          "description": "Represents the dynamic subtitle annotation path",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_\\.\\-\\|@#]*$"
        },
        "value": {
          "description": "Represents the drop down value to be shown",
          "type": "string"
        },
        "chartProperties": {
          "description": "This property is responsible for setting specific chart settings",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "plotArea": {
              "$ref": "#/$defs/plotAreaDef"
            },
            "timeAxis": {
              "$ref": "#/$defs/timeAxisDef"
            }
          }
        },
        "colorPalette": {
          "description": "Represents the configuration to customize the column stacked chart",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            {
              "type": "object"
            }
          ]
        }
      }
    },
    "card_setting": {
      "description": "Represents the card specific properties - properties that are passed to the card",
      "type": "object",
      "required": ["title"],
      "additionalProperties": true,
      "properties": {
        "category": {
          "description": "Represents the category of the card- used in the card header",
          "type": "string",
          "pattern": "^\\{\\{[^\\W\\.\\-][\\w\\.\\-]*\\}\\}$",
          "i18n": {
            "type": "XTIT",
            "comment": "Card category which is displayed in the card header"
          }
        },
        "itemText": {
          "description": "Represents the user defined string in placeholder card",
          "type": "string",
          "pattern": "^\\{\\{[^\\W\\.\\-][\\w\\.\\-]*\\}\\}$",
          "i18n": {
            "type": "XALT",
            "comment": "Text in placeholder card"
          }
        },
        "title": {
          "description": "Represents language-dependent title of the card - used in the card header",
          "type": "string",
          "pattern": "^\\{\\{[^\\W\\.\\-][\\w\\.\\-]*\\}\\}$",
          "i18n": {
            "type": "XTIT",
            "comment": "Card title which is displayed in the card header"
          }
        },
        "subTitle": {
          "description": "Represents language-dependent subtitle of the card - used in the card header",
          "type": "string",
          "pattern": "^\\{\\{[^\\W\\.\\-][\\w\\.\\-]*\\}\\}$",
          "i18n": {
            "type": "XTIT",
            "comment": "Card subtitle which is displayed in the card header"
          }
        },
        "valueSelectionInfo": {
          "description": "Represents things like people, number of items",
          "type": "string",
          "pattern": "^\\{\\{[^\\W\\.\\-][\\w\\.\\-]*\\}\\}$",
          "i18n": {
            "type": "XFLD",
            "comment": "Card KPI label"
          }
        },
        "entitySet": {
          "description": "Represents the entity set that will be displayed in this card",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]+$"
        },
        "staticContent": {
          "description": "Represents the static content that will be displayed in this card",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "listFlavor": {
          "description": "Represents the flavor of the list to use in this card. The flavor can be bar chart, carousel or standard",
          "type": "string",
          "enum": ["standard", "bar", "carousel"]
        },
        "listType": {
          "description": "Represents the type of list to use for this card. The list can be extended to display more information or condensed to take up less space on the card",
          "type": "string",
          "enum": ["extended", "condensed"]
        },
        "sortBy": {
          "description": "Represents the sort key for the entity set",
          "type": "string"
        },
        "sortOrder": {
          "description": "Represents the sort order for the entity set",
          "type": "string",
          "enum": ["ascending", "descending"]
        },
        "annotationPath": {
          "description": "Represents the annotation path",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_\\.\\-\\|@#]*$"
        },
        "selectionAnnotationPath": {
          "description": "Represents the selection annotation path",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_\\.\\-\\|@#]*$"
        },
        "chartAnnotationPath": {
          "description": "Represents the chart annotation path",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_\\.\\-\\|@#]*$"
        },
        "presentationAnnotationPath": {
          "description": "Represents the presentation annotation path",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_\\.\\-\\|@#]*$"
        },
        "dataPointAnnotationPath": {
          "description": "Represents the data point annotation path",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_\\.\\-\\|@#]*$"
        },
        "identificationAnnotationPath": {
          "description": "Represents the identification annotation path",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_\\.\\-\\|@#,]*$"
        },
        "kpiAnnotationPath": {
          "description": "Represents the KPI annotation path",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_\\.\\-\\|@#]*$"
        },
        "selectionPresentationAnnotationPath": {
          "description": "Represents the selection presentation annotation path",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_\\.\\-\\|@#]*$"
        },
        "dynamicSubtitleAnnotationPath": {
          "description": "Represents the dynamic subtitle annotation path",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_\\.\\-\\|@#]*$"
        },
        "ignoreSapText": {
          "description": "Represents the flag to indicate priority of number formatting over sap text",
          "type": "boolean",
          "default": false
        },
        "enableAddToInsights": {
          "description": "Represents the flag to enable/disable individual card's functionality to add them to insight",
          "type": "boolean",
          "default": true
        },
        "showRefresh": {
          "description": "Represents the flag to show/hide individual card's functionality to refresh the card",
          "type": "boolean",
          "default": true
        },
        "defaultSpan": {
          "$ref": "#/$defs/defaultSpanDef"
        },
        "requireAppAuthorization": {
          "description": "Represents the cards for which authorization is required",
          "type": "string"
        },
        "objectStreamCardsSettings": {
          "$ref": "#/$defs/objectStreamCardsSettingsDef"
        },
        "enableLocaleCurrencyFormatting": {
          "description": "Represents the flag to indicate the use of object number/smart field",
          "type": "boolean",
          "default": false
        },
        "navigation": {
          "description": "Represents the configuration to alter the navigation mode in OVP Analytical Cards",
          "type": "string",
          "enum": ["dataPointNav", "chartNav", "headerNav", "noHeaderNav"]
        },
        "showFilterInHeader": {
          "description": "Represents a switch to Show or Hide Filters in Cards Headers in OVP application",
          "type": "boolean",
          "default": false
        },
        "showSortingInHeader": {
          "description": "Represents a switch to Show or Hide Sorting in Cards Headers in OVP application",
          "type": "boolean",
          "default": false
        },
        "imageSupported": {
          "description": "Flag for enabling images in a condensed list card",
          "type": "boolean",
          "default": false
        },
        "showLineItemDetail": {
          "description": "Flag for show line item detail in list and table card",
          "type": "boolean",
          "default": false
        },
        "showLabelText": {
          "description": "This property is responsible for showing and hiding text labels on the geo spots",
          "type": "boolean",
          "default": false
        },
        "customParams": {
          "description": "This property is responsible for passing custom parameters present in the entity set to the navigating application",
          "type": "string",
          "pattern": "^[^\\W\\.\\-][\\w\\.\\-]*$"
        },
        "chartProperties": {
          "description": "This property is responsible for setting specific chart settings",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "plotArea": {
              "$ref": "#/$defs/plotAreaDef"
            },
            "timeAxis": {
              "$ref": "#/$defs/timeAxisDef"
            }
          }
        },
        "colorPalette": {
          "description": "Represents the configuration to customize the column stacked chart",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            {
              "type": "object"
            }
          ]
        }
      }
    },
    "resizableLayoutVariant": {
      "description": "Represents the resizable layout variant",
      "type": "object",
      "additionalProperties": false,
      "patternProperties": {
        "^[a-zA-Z0-9_\\.\\-]+$": {
          "$ref": "#/$defs/resizableLayoutVariantCardProperties"
        }
      }
    },
    "card": {
      "description": "Represents the card attributes",
      "type": "object",
      "required": ["template"],
      "additionalProperties": false,
      "properties": {
        "sequencePos": {
          "description": "Represents the position of the card in the sequence",
          "type": "integer"
        },
        "model": {
          "description": "Represents the model for the card",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_\\.\\-\\|@]*$"
        },
        "template": {
          "description": "Represents the card component path to use for this card",
          "type": "string",
          "pattern": "^[a-zA-Z0-9\\.]+$"
        },
        "settings": {
          "$ref": "#/$defs/card_setting"
        },
        "tabs": {
          "description": "Represents the card with view switch control",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/$defs/tab_setting"
          }
        }
      }
    },
    "filterFieldName": {
      "type": "object",
      "description": "Represents the configuration object for each date filter field",
      "properties": {
        "defaultValue": {
          "type": "object",
          "description": "Represents the configuration for setting default value for the date filter field",
          "properties": {
            "operation": {
              "type": "string",
              "description": "Represents the default semantic date value to be set on the filter field"
            }
          }
        },
        "selectedValues": {
          "type": "string",
          "description": "Represents the semantic date values selected for the date filter field"
        },
        "customDateRangeImplementation": {
          "type": "string",
          "description": "Represents the custom implementation for semantic date filter field"
        },
        "exclude": {
          "type": "boolean",
          "description": "Flag to exclude values from the date picker",
          "default": false
        }
      }
    },
    "refreshStrategies_prop_def": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "entitySets": {
          "description": "Represents the map of entity sets configured for refresh strategies",
          "type": "object"
        }
      }
    },
    "defaultLayoutType_def": {
      "type": "string"
    },
    "implementingComponent_def": {
      "oneOf": [
        {
          "type": "object",
          "additionalProperties": false,
          "required": ["componentName"],
          "properties": {
            "componentName": {
              "description": "Represents the name of the component to be loaded inside the canvas",
              "type": "string",
              "pattern": "^([a-zA-Z][a-zA-Z0-9_]{0,39})(\\.[a-zA-Z][a-zA-Z0-9_]{0,39})*$"
            },
            "binding": {
              "$ref": "#/$defs/component_binding_def"
            },
            "settings": {
              "$ref": "#/$defs/component_setting_def"
            },
            "pages": {
              "$ref": "#/$defs/component_pages_def"
            }
          }
        },
        {
          "type": "object",
          "additionalProperties": false,
          "required": ["componentUsage"],
          "properties": {
            "componentUsage": {
              "description": "Represents the reference to the name of the componentUsages defined in sap.ui5/componentUsages for the component to be loaded inside the canvas",
              "type": "string"
            },
            "binding": {
              "$ref": "#/$defs/component_binding_def"
            },
            "settings": {
              "$ref": "#/$defs/component_setting_def"
            },
            "pages": {
              "$ref": "#/$defs/component_pages_def"
            }
          }
        }
      ]
    },
    "routingSpec_def": {
      "type": "object",
      "additionalProperties": false,
      "required": ["routeName"],
      "properties": {
        "routeName": {
          "description": "Represents the name of the route",
          "type": "string"
        },
        "noOData": {
          "description": "Represents the switch to indicate, that this route is not related to the OData service",
          "type": "boolean"
        },
        "binding": {
          "description": "Represents the binding string to indicate, how the page should be bound relative to the predecessor page or absolute",
          "type": "string"
        },
        "headerTitle": {
          "description": "Represents the the title to be shown on the page",
          "type": "string"
        },
        "typeImageUrl": {
          "description": "Represents the URL pointing to an icon, that will be shown in the navigation menu additional to the title to represent the page",
          "type": "string"
        },
        "noKey": {
          "description": "Represents the switch to indicate, whether this route is reached via a 1:1 navigation or a 1:n navigation",
          "type": "boolean"
        },
        "semanticKey": {
          "description": "Name of a semantic key field which can be used to identify an instance of this page. Only relevant if nKey is false.",
          "type": "string"
        }
      }
    },
    "navigation_def": {
      "description": "Represents ...",
      "type": "object",
      "additionalProperties": false,
      "minProperties": 1,
      "properties": {
        "display": {
          "description": "Represents an action triggered by the user on UI: the navigation to display an object",
          "$ref": "#/$defs/action_prop_def"
        },
        "create": {
          "description": "Represents an action triggered by the user on UI: the navigation to create an object",
          "$ref": "#/$defs/action_prop_def"
        },
        "edit": {
          "description": "Represents an action triggered by the user on UI: the navigation to edit an object",
          "$ref": "#/$defs/action_prop_def"
        }
      }
    },
    "component_def": {
      "type": "object",
      "additionalProperties": false,
      "required": ["name"],
      "properties": {
        "name": {
          "description": "The name of the component",
          "type": "string",
          "pattern": "^([a-zA-Z][a-zA-Z0-9]{0,39})(\\.[a-zA-Z][a-zA-Z0-9]{0,39})*$"
        },
        "list": {
          "description": "Switch to create a route for a list (aggregation) if true and routing for an entity if not set or false",
          "type": "boolean"
        },
        "settings": {
          "$ref": "#/$defs/component_setting_def"
        }
      }
    },
    "component_pages_def": {
      "type": "object",
      "additionalProperties": false,
      "patternProperties": {
        "^[a-zA-Z0-9_\\.\\-]+[\\|]?[a-zA-Z0-9_\\.\\-]+$": {
          "$ref": "#/$defs/pages_map"
        }
      }
    },
    "component_binding_def": {
      "description": " Represents a binding string to indicate, how the reuse component should be bound relative to the containing page or absolute ",
      "type": "string"
    },
    "component_setting_def": {
      "description": "Represents the settings specific to one component",
      "type": "object"
    },
    "embeddedComponent": {
      "type": "object",
      "additionalProperties": false,
      "patternProperties": {
        "^[a-zA-Z0-9_.:-]+$": {
          "allOf": [
            {
              "type": "object",
              "required": ["id", "title"],
              "properties": {
                "id": {
                  "description": "Represents an unique id for the instance of the reuse component inside of the object page",
                  "type": "string",
                  "pattern": "^([A-Za-z_][-A-Za-z0-9_.:]*)$"
                },
                "title": {
                  "description": "Represents the title for the content of the reuse component",
                  "type": "string",
                  "pattern": "^\\{\\{[^\\W][\\w\\.\\-]*\\}\\}$",
                  "i18n": {
                    "type": "XTIT",
                    "comment": "Reuse component title"
                  }
                },
                "binding": {
                  "description": "Represents an optional element binding  for the ComponentContainer that hosts the reuse component",
                  "type": "string"
                },
                "settings": {
                  "description": "Represents a map to populate the API of the reuse component",
                  "type": "object"
                },
                "hiddenByDefault": {
                  "description": "Flag, whether the embedded component should be hidden by default",
                  "type: ": "boolean"
                },
                "groupTitle": {
                  "description": "Represents group title of reuse components",
                  "type": "string"
                },
                "leadingSectionIdOrPath": {
                  "description": "Represents a section that behaves a leading section for the group",
                  "type": "string"
                }
              }
            },
            {
              "oneOf": [
                {
                  "type": "object",
                  "required": ["componentName"],
                  "properties": {
                    "componentName": {
                      "description": "Represents the name of the reuse component ",
                      "type": "string",
                      "pattern": "^([a-zA-Z][a-zA-Z0-9_]{0,39})(\\.[a-zA-Z][a-zA-Z0-9_]{0,39})*$"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": ["componentUsage"],
                  "properties": {
                    "componentUsage": {
                      "description": "Represents the reference to the name of the componentUsages defined in sap.ui5/componentUsages",
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": ["embeddedComponents"],
                  "properties": {
                    "embeddedComponents": {
                      "$ref": "#/$defs/embeddedComponent"
                    }
                  }
                }
              ]
            }
          ]
        }
      }
    },
    "action_prop_def": {
      "type": "object",
      "additionalProperties": false,
      "required": ["path", "target"],
      "properties": {
        "path": {
          "description": "Represents the path in the manifest to the target to which the navigation is bound",
          "type": "string"
        },
        "target": {
          "description": "Represents the pointer to a semantic object",
          "type": "string"
        },
        "refreshStrategyOnAppRestore": {
          "description": "Represents the refresh strategies configured for external display navigation while coming back to the source app",
          "$ref": "#/$defs/refreshStrategies_prop_def"
        }
      }
    },
    "pages_map": {
      "type": "object",
      "additionalProperties": false,
      "required": ["component"],
      "properties": {
        "navigationProperty": {
          "description": "Represents the navigation property that leads to this page. The navigation links of the previous page (the page that calls this one) are determined through this property ",
          "type": "string"
        },
        "entitySet": {
          "description": "Represents the entity set that defines either the aggregation or the root object of the component",
          "type": "string"
        },
        "component": {
          "description": "Represents the component and its settings that makes the page",
          "$ref": "#/$defs/component_def"
        },
        "navigation": {
          "description": "Represents the different navigation targets",
          "$ref": "#/$defs/navigation_def"
        },
        "embeddedComponents": {
          "description": "Represent reuse components that should be appended at the end of the template component",
          "$ref": "#/$defs/embeddedComponent"
        },
        "routingSpec": {
          "description": "Represents the routing specification",
          "$ref": "#/$defs/routingSpec_def"
        },
        "implementingComponent": {
          "description": "Represents the component to be loaded inside the canvas if sap.suite.ui.generic.template.Canvas is used as component name, and its settings",
          "$ref": "#/$defs/implementingComponent_def"
        },
        "defaultLayoutType": {
          "description": "Default layout used to open the corresponding page in FlexibleColumnLayout",
          "$ref": "#/$defs/defaultLayoutType_def"
        },
        "defaultLayoutTypeIfExternalNavigation": {
          "description": "Default layout used to open the corresponding page in FlexibleColumnLayout when reached via external navigation",
          "$ref": "#/$defs/defaultLayoutType_def"
        },
        "pages": {
          "type": "object",
          "additionalProperties": false,
          "patternProperties": {
            "^[a-zA-Z0-9_\\.\\-]+[\\|]?[a-zA-Z0-9_\\.\\-]+$": {
              "$ref": "#/$defs/pages_map"
            }
          }
        }
      }
    },
    "pages_array": {
      "type": "object",
      "additionalProperties": false,
      "required": ["component"],
      "properties": {
        "navigationProperty": {
          "description": "Represents the navigation property that leads to this page. The navigation links of the previous page (the page that calls this one) are determined through this property ",
          "type": "string"
        },
        "entitySet": {
          "description": "Represents the entity set that defines either the aggregation or the root object of the component",
          "type": "string"
        },
        "component": {
          "description": "Represents the component and its settings that makes the page",
          "$ref": "#/$defs/component_def"
        },
        "navigation": {
          "description": "Represents the different navigation targets",
          "$ref": "#/$defs/navigation_def"
        },
        "embeddedComponents": {
          "description": "Represent reuse components that should be appended at the end of the template component",
          "$ref": "#/$defs/embeddedComponent"
        },
        "routingSpec": {
          "description": "Represents the routing specification",
          "$ref": "#/$defs/routingSpec_def"
        },
        "implementingComponent": {
          "description": "Represents the component to be loaded inside the canvas if sap.suite.ui.generic.template.Canvas is used as component name, and its settings",
          "$ref": "#/$defs/implementingComponent_def"
        },
        "defaultLayoutType": {
          "description": "Default layout used to open the corresponding page in FlexibleColumnLayout",
          "$ref": "#/$defs/defaultLayoutType_def"
        },
        "defaultLayoutTypeIfExternalNavigation": {
          "description": "Default layout used to open the corresponding page in FlexibleColumnLayout when reached via external navigation",
          "$ref": "#/$defs/defaultLayoutType_def"
        },
        "pages": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/pages_array"
          }
        }
      }
    },
    "setting_def": {
      "description": "Represents global settings for the application controller",
      "type": "object"
    },
    "routeTargetObject": {
      "description": "Represents the definition of a target of a route as object.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Represents the name of the routing target",
          "type": "string"
        },
        "prefix": {
          "description": "The prefix of the routing target",
          "type": "string"
        },
        "propagateTitle": {
          "description": "Indicates whether this 'Component' target should propagate it's title to this component or not",
          "type": "boolean",
          "default": "#/$defs/routing/config/propagateTitle"
        }
      }
    },
    "actualTargetAdditionComponentUsage": {
      "type": "object",
      "required": ["usage", "type"],
      "properties": {
        "usage": {
          "description": "Represents the componentUsage of the component that will be created",
          "type": "string"
        },
        "id": {
          "description": "Represents the id of the created view or component",
          "type": "string"
        },
        "type": {
          "description": "Represents the type of the type Component",
          "type": "string",
          "enum": ["Component"]
        },
        "level": {
          "description": "Represents the level of the current component which is used to define the transition direction when navigate to this component",
          "type": "number",
          "multipleOf": 1
        }
      }
    },
    "actualTargetAdditionStandard": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": {
          "description": "Represents the name of a view or component that will be created",
          "type": "string"
        },
        "id": {
          "description": "Represents the id of the created view or component",
          "type": "string"
        },
        "path": {
          "description": "Represents a prefix that is prepended in front of the view or component name",
          "type": "string"
        },
        "type": {
          "description": "Represents the type of the type View or Component",
          "type": "string",
          "enum": ["View", "Component"]
        },
        "level": {
          "description": "Represents the level of the current view/component which is used to define the transition direction when navigate to this view/component",
          "type": "number",
          "multipleOf": 1
        }
      }
    },
    "legacyTargetAddition": {
      "type": "object",
      "required": ["viewName"],
      "properties": {
        "viewName": {
          "description": "Represents the name of a view that will be created",
          "type": "string"
        },
        "viewId": {
          "description": "Represents the id of the created view",
          "type": "string"
        },
        "viewPath1": {
          "description": "Represents a prefix that is prepended in front of the viewName",
          "type": "string"
        },
        "viewLevel": {
          "description": "Represents the level of the current view which is used to define the transition direction when navigate to this view",
          "type": "number",
          "multipleOf": 1
        }
      }
    },
    "routeWithoutName": {
      "description": "Represents the definition of route without the option 'name'. This is used when routes are defined in an object.",
      "type": "object",
      "properties": {
        "pattern": {
          "description": "Represents the url pattern that the route is matched against",
          "type": "string"
        },
        "greedy": {
          "description": "Whether the route should be matched when another route is already matched",
          "type": "boolean"
        },
        "target": {
          "description": "Represents one or multiple names of targets which are displayed when the route is matched",
          "$ref": "#/$defs/routeTarget"
        },
        "titleTarget": {
          "description": "Represents the name of the target where the 'title' information should be taken",
          "type": "string"
        }
      }
    },
    "route": {
      "description": "Represents the definition of each route",
      "allOf": [
        {
          "$ref": "#/$defs/routeWithoutName"
        },
        {
          "type": "object",
          "required": ["name"],
          "properties": {
            "name": {
              "description": "Represents the name of the route",
              "type": "string"
            }
          }
        }
      ]
    },
    "actualTargetAdditionStandardWithoutRequiredProp": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Represents the name of a view or component that will be created",
          "type": "string"
        },
        "id": {
          "description": "Represents the id of the created view or component",
          "type": "string"
        },
        "path": {
          "description": "Represents a prefix that is prepended in front of the view or component name",
          "type": "string"
        },
        "type": {
          "description": "Represents the type of the type View or Component",
          "type": "string",
          "enum": ["View", "Component"]
        },
        "level": {
          "description": "Represents the level of the current view/component which is used to define the transition direction when navigate to this view/component",
          "type": "number",
          "multipleOf": 1
        }
      }
    },
    "legacyTargetAdditionWithoutRequiredProp": {
      "type": "object",
      "properties": {
        "viewName": {
          "description": "Represents the name of a view that will be created",
          "type": "string"
        },
        "viewId": {
          "description": "Represents the id of the created view",
          "type": "string"
        },
        "viewPath1": {
          "description": "Represents a prefix that is prepended in front of the viewName",
          "type": "string"
        },
        "viewLevel": {
          "description": "Represents the level of the current view which is used to define the transition direction when navigate to this view",
          "type": "number",
          "multipleOf": 1
        }
      }
    },
    "target": {
      "description": "Represents the definition of each target",
      "type": "object",
      "properties": {
        "title": {
          "description": "Represents the information which is included as a parameter of the 'titleChanged' event fired on Router when this target is displayed. The title can be set with static text and can also be set with a valid property binding syntax which will be resolved under the scope of the view in the target where the title property is defined.",
          "type": "string"
        },
        "viewType": {
          "description": "Represents the type of view that is going to be created",
          "type": "string",
          "enum": ["XML", "JSON", "JS", "HTML", "Template"]
        },
        "targetParent": {
          "description": "Represents the id of the view that contains the control specified by the 'controlId'",
          "type": "string"
        },
        "controlId": {
          "description": "Represents the id of the control where you want to place the view created by the target",
          "type": "string"
        },
        "controlAggregation": {
          "description": "Represents the name of an aggregation of the controlId that contains the views",
          "type": "string"
        },
        "clearControlAggregation": {
          "description": "Whether the aggregation of the control should be cleared before adding the view",
          "type": "boolean"
        },
        "parent": {
          "description": "Represents the name of another target which will also be displayed once this target is displayed",
          "type": "string"
        },
        "transition": {
          "description": "Represents the type of transition when navigating from previous view to this view",
          "anyOf": [
            {
              "type": "string",
              "default": "slide"
            },
            {
              "type": "string",
              "enum": ["slide", "flip", "fade", "show"]
            }
          ]
        },
        "transitionParameters": {
          "description": "Represents the transition parameters that are passed to the event handlers",
          "type": "object"
        }
      }
    },
    "routeTarget": {
      "description": "Represents the definition of a target of a route.",
      "oneOf": [
        {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/$defs/routeTargetObject"
              }
            ]
          }
        },
        {
          "type": "string"
        },
        {
          "$ref": "#/$defs/routeTargetObject"
        }
      ]
    },
    "ui5setting": {
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "defaultBindingMode": {
          "description": "Represents default binding mode and must be a string value from sap.ui.model.BindingMode. Possible values: Default, OneTime, OneWay, TwoWay",
          "type": "string",
          "default": "Default",
          "enum": ["Default", "OneTime", "OneWay", "TwoWay"]
        },
        "bundleName": {
          "description": "Represents the alternative for bundleUrl",
          "type": "string"
        },
        "bundleUrl": {
          "description": "Represents the URL for the resource bundle",
          "type": "string"
        },
        "bundleUrlRelativeTo": {
          "description": "Indicates whether url is relative to component (default) or manifest",
          "type": "string",
          "default": "component",
          "enum": ["manifest", "component"]
        },
        "fallbackLocale": {
          "description": "Represents the fallback locale",
          "type": "string"
        },
        "supportedLocales": {
          "description": "Represents the list of supported locales",
          "type": "array"
        },
        "terminologies": {
          "description": "Represents terminologies with additional properties files",
          "type": "object",
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9_\\-]*$": {
              "$ref": "#/$defs/terminologySetting"
            }
          }
        },
        "enhanceWith": {
          "description": "Represents enhancement of UI5 resource model with additional properties files",
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/$defs/enhanceWithSetting"
          }
        }
      }
    },
    "rootView_def": {
      "description": "Represents the root view definition being either the name of the view or the view definition object",
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "required": ["viewName"],
          "additionalProperties": true,
          "properties": {
            "viewName": {
              "description": "Represents the name of the view",
              "type": "string"
            },
            "type": {
              "description": "Represents the type of the view. Possible Values: XML, JSON, JS, HTML, Template",
              "type": "string",
              "enum": ["XML", "JSON", "JS", "HTML", "Template"]
            },
            "id": {
              "description": "Represents the id of the view",
              "type": "string"
            },
            "async": {
              "description": "Configure the targets for asynchronous loading",
              "type": "boolean",
              "default": false
            }
          }
        }
      ]
    },
    "routing": {
      "description": "Represents the configuration of routing",
      "type": "object",
      "properties": {
        "config": {
          "description": "Represents the default properties defined for route and target",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "routerClass": {
                  "description": "Represents the router class",
                  "type": "string"
                },
                "async": {
                  "description": "Indicates whether the Views in routing are loaded asyncly",
                  "type": "boolean",
                  "default": false
                },
                "propagateTitle": {
                  "description": "Indicates whether the targets which have type 'Component' should propagate their title to this component or not",
                  "type": "boolean",
                  "default": false
                },
                "bypassed": {
                  "description": "Represents information about targets to display when no route is matched",
                  "type": "object",
                  "additionalProperties": false,
                  "required": ["target"],
                  "properties": {
                    "target": {
                      "description": "Represents one or multiple names of targets that are displayed when no route is matched",
                      "$ref": "#/$defs/routeTarget"
                    }
                  }
                }
              }
            },
            {
              "$ref": "#/$defs/target"
            },
            {
              "$ref": "#/$defs/legacyTargetAdditionWithoutRequiredProp"
            },
            {
              "$ref": "#/$defs/actualTargetAdditionStandardWithoutRequiredProp"
            }
          ]
        },
        "routes": {
          "oneOf": [
            {
              "description": "Represents the definition of routes by providing an array with elements which contain the configuration for each route",
              "type": "array",
              "items": {
                "$ref": "#/$defs/route"
              }
            },
            {
              "description": "Represents the definition of routes by providing an object with the route's name as the key and other route options in an object as the value",
              "type": "object",
              "patternProperties": {
                "[\\s\\S]*": {
                  "$ref": "#/$defs/routeWithoutName"
                }
              }
            }
          ]
        },
        "targets": {
          "description": "Represents the definition of targets",
          "type": "object",
          "patternProperties": {
            "[\\s\\S]*": {
              "oneOf": [
                {
                  "allOf": [
                    {
                      "$ref": "#/$defs/target"
                    },
                    {
                      "$ref": "#/$defs/legacyTargetAddition"
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "$ref": "#/$defs/target"
                    },
                    {
                      "oneOf": [
                        {
                          "$ref": "#/$defs/actualTargetAdditionStandard"
                        },
                        {
                          "$ref": "#/$defs/actualTargetAdditionComponentUsage"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "rootView_def_flexEnabled": {
      "description": "Represents the root view definition when flex is enabled (requires a view id)",
      "type": "object",
      "required": ["id", "viewName"],
      "additionalProperties": true,
      "properties": {
        "viewName": {
          "description": "Represents the name of the view",
          "type": "string"
        },
        "type": {
          "description": "Represents the type of the view. Possible Values: XML, JSON, JS, HTML, Template",
          "type": "string",
          "enum": ["XML", "JSON", "JS", "HTML", "Template"]
        },
        "id": {
          "description": "Represents the id of the view",
          "type": "string"
        },
        "async": {
          "description": "Configure the targets for asynchronous loading",
          "type": "boolean",
          "default": false
        }
      }
    },
    "routing_flexEnabled": {
      "description": "Represents the configuration of routing",
      "type": "object",
      "properties": {
        "config": {
          "description": "Represents the default properties defined for route and target",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "routerClass": {
                  "description": "Represents the router class",
                  "type": "string"
                },
                "async": {
                  "description": "Indicates whether the Views in routing are loaded asyncly",
                  "type": "boolean",
                  "default": false
                },
                "bypassed": {
                  "description": "Represents information about targets to display when no route is matched",
                  "type": "object",
                  "additionalProperties": false,
                  "required": ["target"],
                  "properties": {
                    "target": {
                      "description": "Represents one or multiple names of targets that are displayed when no route is matched",
                      "$ref": "#/$defs/routeTarget"
                    }
                  }
                },
                "viewPath2": {
                  "description": "Represents a prefix that is prepended in front of the viewName",
                  "type": "string"
                }
              }
            },
            {
              "$ref": "#/$defs/target"
            },
            {
              "$ref": "#/$defs/legacyTargetAdditionWithoutRequiredProp"
            },
            {
              "$ref": "#/$defs/actualTargetAdditionStandardWithoutRequiredProp"
            }
          ]
        },
        "routes": {
          "oneOf": [
            {
              "description": "Represents the definition of routes by providing an array with elements which contain the configuration for each route",
              "type": "array",
              "items": {
                "$ref": "#/$defs/route"
              }
            },
            {
              "description": "Represents the definition of routes by providing an object with the route's name as the key and other route options in an object as the value",
              "type": "object",
              "patternProperties": {
                "[\\s\\S]*": {
                  "$ref": "#/$defs/routeWithoutName"
                }
              }
            }
          ]
        },
        "targets": {
          "description": "Represents the definition of targets",
          "type": "object",
          "patternProperties": {
            "[\\s\\S]*": {
              "oneOf": [
                {
                  "allOf": [
                    {
                      "$ref": "#/$defs/target"
                    },
                    {
                      "type": "object",
                      "required": ["viewName", "viewId"],
                      "properties": {
                        "viewName": {
                          "description": "Represents the name of a view that will be created",
                          "type": "string"
                        },
                        "viewId": {
                          "description": "Represents the id of the created view",
                          "type": "string"
                        },
                        "viewPath1": {
                          "description": "Represents a prefix that is prepended in front of the viewName",
                          "type": "string"
                        }
                      }
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "$ref": "#/$defs/target"
                    },
                    {
                      "oneOf": [
                        {
                          "type": "object",
                          "required": ["name", "id"],
                          "properties": {
                            "name": {
                              "description": "Represents the name of a view or component that will be created",
                              "type": "string"
                            },
                            "id": {
                              "description": "Represents the id of the created view or component",
                              "type": "string"
                            },
                            "path": {
                              "description": "Represents a prefix that is prepended in front of the view or component name",
                              "type": "string"
                            },
                            "type": {
                              "description": "Represents the type of the type View or Component",
                              "type": "string",
                              "enum": ["View", "Component"]
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": ["usage", "id", "type"],
                          "properties": {
                            "usage": {
                              "description": "Represents the componentUsage of the component that will be created",
                              "type": "string"
                            },
                            "id": {
                              "description": "Represents the id of the created view or component",
                              "type": "string"
                            },
                            "type": {
                              "description": "Represents the type of the type Component",
                              "type": "string",
                              "enum": ["Component"]
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "command": {
      "description": "Represents a UI5 shortcut command.",
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "shortcut": {
          "description": "A string describing a shortcut key combination that, when used by the user, will trigger the command.",
          "type": "string",
          "patternTransformCode": "''.split('').map(function(char) { console.log(char);  if (/[a-z]/i.test(char)) { return `[${char.toUpperCase()}${char.toLowerCase()}]`; } else { return char; } } ).join('')",
          "patternFromRuntime": "^((Ctrl|Shift|Alt)(\\+)?){0,3}([A-Za-z0-9\\.,\\-\\*\\/=]|Plus|Tab|Space|Enter|Backspace|Home|Delete|End|Pageup|Pagedown|Escape|ArrowUp|ArrowDown|ArrowLeft|ArrowRight|F[1-9]|F1[0-2])$",
          "pattern": "^(([Cc][Tt][Rr][Ll]|[Ss][Hh][Ii][Ff][Tt]|[Aa][Ll][Tt])(\\+)?){0,3}([A-Za-z0-9\\.,\\-\\*\\/=]|[Pp][Ll][Uu][Ss]|[Tt][Aa][Bb]|[Ss][Pp][Aa][Cc][Ee]|[Ee][Nn][Tt][Ee][Rr]|[Bb][Aa][Cc][Kk][Ss][Pp][Aa][Cc][Ee]|[Hh][Oo][Mm][Ee]|[Dd][Ee][Ll][Ee][Tt][Ee]|[Ee][Nn][Dd]|[Pp][Aa][Gg][Ee][Uu][Pp]|[Pp][Aa][Gg][Ee][Dd][Oo][Ww][Nn]|[Ee][Ss][Cc][Aa][Pp][Ee]|[Aa][Rr][Rr][Oo][Ww][Uu][Pp]|[Aa][Rr][Rr][Oo][Ww][Dd][Oo][Ww][Nn]|[Aa][Rr][Rr][Oo][Ww][Ll][Ee][Ff][Tt]|[Aa][Rr][Rr][Oo][Ww][Rr][Ii][Gg][Hh][Tt]|F[1-9]|F1[0-2])$"
        }
      }
    },
    "booleanOrString": {
      "oneOf": [
        {
          "type": "boolean"
        },
        {
          "type": "string"
        }
      ]
    },
    "enhanceWithSetting_0": {
      "oneOf": [
        {
          "additionalProperties": false,
          "required": ["bundleUrl"],
          "properties": {
            "bundleUrl": {
              "description": "Represents property url for model enhancement",
              "type": "string"
            },
            "bundleUrlRelativeTo": {
              "description": "Indicates whether url is relative to component (default) or manifest",
              "type": "string",
              "default": "component",
              "enum": ["manifest", "component"]
            },
            "fallbackLocale": {
              "description": "Represents the fallback locale",
              "type": "string"
            },
            "supportedLocales": {
              "description": "Represents the list of supported locales",
              "type": "array"
            },
            "terminologies": {
              "description": "Represents terminologies with additional properties files",
              "type": "object",
              "patternProperties": {
                "^[a-zA-Z0-9_\\-]*$": {
                  "$ref": "#/$defs/terminologySetting"
                }
              }
            }
          }
        },
        {
          "required": ["bundleName"],
          "additionalProperties": false,
          "properties": {
            "bundleName": {
              "description": "Represents the alternative for bundleUrl",
              "type": "string"
            },
            "supportedLocales": {
              "description": "Represents the list of supported locales",
              "type": "array"
            },
            "fallbackLocale": {
              "description": "Represents the fallback locale",
              "type": "string"
            },
            "terminologies": {
              "description": "Represents terminologies with additional properties files",
              "type": "object",
              "patternProperties": {
                "^[a-zA-Z0-9_\\-]*$": {
                  "$ref": "#/$defs/terminologySetting"
                }
              }
            }
          }
        }
      ]
    },
    "terminologySetting": {
      "oneOf": [
        {
          "additionalProperties": false,
          "required": ["bundleName"],
          "properties": {
            "bundleName": {
              "description": "Represents the alternative for bundleUrl",
              "type": "string"
            },
            "supportedLocales": {
              "description": "Represents the list of supported locales",
              "type": "array"
            }
          }
        },
        {
          "additionalProperties": false,
          "required": ["bundleUrl"],
          "properties": {
            "bundleUrl": {
              "description": "Represents the URL for the resource bundle",
              "type": "string"
            },
            "bundleUrlRelativeTo": {
              "description": "Indicates whether url is relative to component (default) or manifest",
              "type": "string",
              "default": "component",
              "enum": ["manifest", "component"]
            },
            "supportedLocales": {
              "description": "Represents the list of supported locales",
              "type": "array"
            }
          }
        }
      ]
    },
    "service": {
      "description": "Represents the definition of each service",
      "type": "object",
      "required": ["factoryName"],
      "additionalProperties": true,
      "properties": {
        "factoryName": {
          "description": "Represents the name of the service factory ",
          "type": "string",
          "pattern": "^([a-z_$][a-z0-9_$]{0,39}\\.)*([a-zA-Z_$][a-zA-Z0-9_$]{0,39})$"
        },
        "optional": {
          "description": "Indicates whether the service optional or not ",
          "type": "boolean",
          "default": false
        }
      }
    },
    "version": {
      "type": "string"
    },
    "id_def_0": {
      "type": "string"
    },
    "config": {
      "oneOf": [
        {
          "type": "array",
          "items": {
            "$ref": "#/$defs/config"
          }
        },
        {
          "type": "string"
        },
        {
          "type": "boolean"
        },
        {
          "type": "number"
        },
        {
          "type": "object"
        }
      ]
    },
    "resourceRoot": {
      "type": "string",
      "pattern": "^((\\.(?!\\.)\\/)?\\w+\\/?)+$"
    },
    "model": {
      "description": "Represents sapui5 model name",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "description": "Represents model class name",
          "type": "string"
        },
        "dataSource": {
          "description": "Represents string of key/alias from sap.app dataSources to reference an existing data source",
          "type": "string"
        },
        "uri": {
          "description": "Represents URI for the model",
          "type": "string"
        },
        "preload": {
          "description": "Indicates that the model will be immediately created after the manifest is loaded by Component Factory and before the Component instance is created",
          "type": "boolean",
          "default": false
        },
        "settings": {
          "$ref": "#/$defs/ui5setting"
        }
      }
    },
    "component": {
      "description": "Represents sapui5 component name",
      "type": "object",
      "properties": {
        "minVersion": {
          "description": "Represents minimal version of ui5 component",
          "$ref": "#/$defs/version"
        },
        "lazy": {
          "description": "Represents Indicator to lazy loading component",
          "type": "boolean",
          "default": false
        }
      }
    },
    "lib": {
      "description": "Represents sapui5 library name",
      "type": "object",
      "properties": {
        "minVersion": {
          "description": "Represents minimal version of ui5 library",
          "$ref": "#/$defs/version"
        },
        "lazy": {
          "description": "Represents Indicator to lazy loading lib",
          "type": "boolean",
          "default": false
        }
      }
    },
    "minUI5Version": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "componentUsages": {
      "description": "Represents component name for usage",
      "type": "object",
      "required": ["name"],
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "Represents name of reuse component",
          "type": "string",
          "pattern": "^([a-zA-Z_$][a-zA-Z0-9_$]{0,39}\\.)*([a-zA-Z_$][a-zA-Z0-9_$]{0,39})$"
        },
        "componentData": {
          "description": "Represents component data for the Component",
          "$ref": "#/$defs/config"
        },
        "settings": {
          "description": "Represents settings for the Component",
          "$ref": "#/$defs/config"
        },
        "lazy": {
          "description": "Represents Indicator to lazy loading component usage, default true",
          "type": "boolean",
          "default": true
        }
      }
    },
    "resource": {
      "type": "object",
      "properties": {
        "js": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["uri"],
            "properties": {
              "uri": {
                "type": "string"
              }
            }
          }
        },
        "css": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["uri"],
            "properties": {
              "uri": {
                "type": "string"
              },
              "id": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "deviceType_0": {
      "type": "object",
      "description": "Represents device types on which the app is running",
      "additionalProperties": false,
      "properties": {
        "desktop": {
          "description": "Represents indicator whether desktop device is supported, default true",
          "type": "boolean"
        },
        "tablet": {
          "description": "Represents indicator whether tablet device is supported, default true",
          "type": "boolean"
        },
        "phone": {
          "description": "Represents indicator whether phone device is supported, default true",
          "type": "boolean"
        }
      }
    },
    "signature_def": {
      "description": "Represents signature for inbound targets ",
      "type": "object",
      "required": ["parameters", "additionalParameters"],
      "additionalProperties": false,
      "properties": {
        "parameters": {
          "type": "object",
          "additionalProperties": false,
          "patternProperties": {
            "^[\\w\\.\\-\\/]+$": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "defaultValue": {
                  "type": "object",
                  "description": " Represents a default Value",
                  "additionalProperties": false,
                  "required": ["value"],
                  "properties": {
                    "value": {
                      "description": "Represents a depending on format either a verbatim default value or a reference",
                      "type": "string"
                    },
                    "format": {
                      "description": "Indicates how 'value' is to be interpreted: ('plain': the 'value' is taken as a literal string value| 'reference': the 'value' is a reference to e.g. a UserDefault parameter (e.g. 'UserDefault.CostCenter'), the resolved parameter value is used)",
                      "type": "string",
                      "enum": ["plain", "reference"]
                    }
                  },
                  "anyOf": [
                    {
                      "properties": {
                        "format": {
                          "type": "string",
                          "enum": ["plain"]
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "properties": {
                        "format": {
                          "type": "string",
                          "enum": ["reference"]
                        },
                        "value": {
                          "type": "string",
                          "pattern": "^(User[.]env|UserDefault(.extended)?)[.][^.]+$"
                        }
                      }
                    },
                    {
                      "properties": {
                        "format": {
                          "type": "null"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                },
                "filter": {
                  "description": "Represents a filter , only if input parameter matches filter",
                  "type": "object",
                  "additionalProperties": false,
                  "required": ["value"],
                  "properties": {
                    "value": {
                      "description": "Represents a depending on format either a verbatim filter value, a regular expression or a reference",
                      "type": "string"
                    },
                    "format": {
                      "type": "string",
                      "description": "Indicates how 'value' is to be interpreted: ('plain': the actual value must match the 'value' property directly| 'regexp': the 'value' represents a regexp which must be present in the actual value| 'reference' : the 'value' represents a reference to e.g. a UserDefault parameter (e.g. 'UserDefault.CostCenter'), the resolved parameter value is then directly compared with the actual value)",
                      "enum": ["plain", "regexp", "reference"]
                    }
                  }
                },
                "launcherValue": {
                  "type": "object",
                  "description": " Represents a value to be used when creating a tile intent for this inbound",
                  "additionalProperties": false,
                  "properties": {
                    "value": {
                      "oneOf": [
                        {
                          "description": "Represents the definition of a single-value tile intent parameter; format property must be 'plain' in this case",
                          "type": "string"
                        },
                        {
                          "description": "Represents the definition of a multi-value tile intent parameter; format property must be 'array' in this case",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      ]
                    },
                    "format": {
                      "description": "Indicates how 'value' is to be interpreted: 'plain': the 'value' is taken as a literal string value | 'array': the 'value' is an array of strings",
                      "type": "string",
                      "enum": ["plain", "array"]
                    },
                    "prompt": {
                      "description": "[Deprecated] Indicates the administrator should be prompted to supply a value when creating a tile",
                      "type": "boolean",
                      "deprecated": true
                    }
                  }
                },
                "required": {
                  "type": "boolean"
                },
                "renameTo": {
                  "description": "Represents the parameter name in legacy ABAP application, e.g. 'RF05L-BUKRS' for parameter 'CompanyCode'",
                  "type": "string"
                }
              }
            }
          }
        },
        "additionalParameters": {
          "description": "Indicates how additional parameters to the declared signature are treated: ('ignored': parameters are not passed on to application | 'allowed': parameters are passed on to application | 'notallowed': additional parameters are not allowed)",
          "type": "string",
          "enum": ["ignored", "allowed", "notallowed"]
        }
      }
    },
    "deviceType": {
      "type": "object",
      "description": "Represents device types on which the app is running",
      "additionalProperties": false,
      "properties": {
        "desktop": {
          "description": "Represents indicator whether desktop device is supported",
          "type": "boolean"
        },
        "tablet": {
          "description": "Represents indicator whether tablet device is supported",
          "type": "boolean"
        },
        "phone": {
          "description": "Represents indicator whether phone device is supported",
          "type": "boolean"
        }
      }
    },
    "objectType": {
      "type": "string",
      "enum": ["query", "cdsprojectionview", "view", "inamodel"]
    },
    "objectName": {
      "type": "string",
      "pattern": "^(\\\\[0-9a-zA-Z_]+\\\\)?[a-zA-Z][a-zA-Z0-9_]*$",
      "minLength": 3,
      "maxLength": 50
    },
    "dataSourceCustom": {
      "type": "object",
      "additionalProperties": false,
      "required": ["uri", "customType"],
      "properties": {
        "uri": {
          "description": "Represents the uri of the data source, should always be given in lower case",
          "type": "string"
        },
        "type": {
          "description": "Represents type of the data source. The supported types are OData, ODataAnnotation, INA, XML, JSON, FHIR, WebSocket, http",
          "type": "string",
          "pattern": "^[a-zA-Z0-9_\\-]+$",
          "not": {
            "enum": ["OData", "ODataAnnotation", "INA", "XML", "JSON", "FHIR", "WebSocket", "http"]
          }
        },
        "settings": {
          "description": "Represents data source type specific attributes (key, value pairs)",
          "$ref": "#/$defs/setting"
        },
        "customType": {
          "description": "Represents a custom data source type flag. So the type can be any string if its true, and only enum values if false",
          "type": "boolean",
          "enum": [true]
        }
      }
    },
    "dataSourceEnum": {
      "type": "object",
      "additionalProperties": false,
      "required": ["uri"],
      "properties": {
        "uri": {
          "description": "Represents uri of the data source",
          "type": "string"
        },
        "type": {
          "description": "Represents type of the data source. The supported types are OData, ODataAnnotation, INA, XML, JSON, FHIR, WebSocket, http",
          "type": "string",
          "enum": ["OData", "ODataAnnotation", "INA", "XML", "JSON", "FHIR", "WebSocket", "http"],
          "default": "OData"
        },
        "settings": {
          "description": "Represents data source type specific attributes (key, value pairs)",
          "$ref": "#/$defs/setting"
        },
        "customType": {
          "type": "boolean",
          "enum": [false]
        }
      }
    },
    "setting": {
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "odataVersion": {
          "description": "Represents version of OData: 2.0 is default",
          "type": "string",
          "enum": ["2.0", "4.0"]
        },
        "localUri": {
          "description": "Represents path to local meta data document or annotation uri",
          "type": "string"
        },
        "annotations": {
          "description": "Represents  array of annotation which references an existing data source of type ODataAnnotation",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maxAge": {
          "description": "Indicates that the client is unwilling to accept a response whose age is greater than the number of seconds specified in this field",
          "type": "number",
          "multipleOf": 1
        },
        "objects": {
          "type": "object",
          "description": "Dictionary of (catalog) objects offered by the datasource",
          "additionalProperties": {
            "description": "A (catalog) object of an InA DataSource",
            "type": "object",
            "properties": {
              "objectName": {
                "$ref": "#/$defs/objectName"
              },
              "objectType": {
                "$ref": "#/$defs/objectType"
              },
              "packageName": {
                "type": "string"
              },
              "schemaName": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["objectName", "objectType"]
          }
        },
        "ignoreAnnotationsFromMetadata": {
          "description": "Indicates whether annotations from metadata should be ignored",
          "type": "boolean"
        }
      }
    },
    "outbound": {
      "type": "object",
      "additionalProperties": false,
      "patternProperties": {
        "^[\\w\\.\\-]+$": {
          "type": "object",
          "additionalProperties": false,
          "required": ["semanticObject", "action"],
          "properties": {
            "semanticObject": {
              "description": "Represents a business entity (e.g., 'Employee')",
              "type": "string",
              "pattern": "^[\\w\\*]{0,30}$"
            },
            "action": {
              "description": "Represents the action to perform on the business entity (e.g., 'display')",
              "type": "string",
              "pattern": "^[\\w\\*]{0,60}$"
            },
            "additionalParameters": {
              "description": "Indicates whether the intent can contain additional context parameters that are not described in the outbound: ('notallowed': the intent must contain only the specified parameters | 'allowed': additional parameters might appear in the navigation intent)| 'ignored': technical meta-parameters for framework usage are added to the intent, these parameters should be ignored by target applications",
              "type": "string",
              "enum": ["notallowed", "ignored", "allowed"]
            },
            "parameters": {
              "description": "Represents parameters of navigation intents",
              "type": "object",
              "additionalProperties": false,
              "patternProperties": {
                "^[\\w\\.\\-\\/]+$": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "value": {
                      "type": "object",
                      "description": "Describes parameters of navigation intents generated or triggered by the application",
                      "additionalProperties": false,
                      "properties": {
                        "value": {
                          "description": "Represents a verbatim value (when 'plain' format is used), a pattern (when 'regexp' format is used), a value coming from a UI5 model (when 'binding' format is used), or a User Default reference (when 'reference' format is used)",
                          "type": "string"
                        },
                        "format": {
                          "description": "Indicates how 'value' is to be interpreted: 'plain': the 'value' is taken as a literal string value | 'reference': the 'value' is a reference to a parameter maintained in the Fiori Launchpad (e.g. 'UserDefault.CostCenter'); the parameter value is used on the outbound intent parameter| 'regexp': the 'value' matches the specified pattern| 'binding': the 'value' is a binding path; the value from the model at the specified binding path will be used on the outbound intent parameter",
                          "type": "string",
                          "enum": ["plain", "regexp", "reference", "binding"]
                        }
                      }
                    },
                    "required": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "inbound": {
      "type": "object",
      "additionalProperties": false,
      "patternProperties": {
        "^[\\w\\.\\-]+$": {
          "type": "object",
          "additionalProperties": false,
          "required": ["semanticObject", "action"],
          "properties": {
            "semanticObject": {
              "description": "Represents semantic object",
              "type": "string",
              "pattern": "^[\\w\\*]{0,30}$"
            },
            "action": {
              "description": "Represents action an the semantic object",
              "type": "string",
              "pattern": "^[\\w\\*]{0,60}$"
            },
            "hideLauncher": {
              "description": "Indicates to not expose this inbound as a tile or link",
              "type": "boolean"
            },
            "icon": {
              "description": "Represents icon",
              "type": "string"
            },
            "title": {
              "description": "Represents a title; to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
              "$ref": "#/$defs/i18n_key_string",
              "i18n": {
                "type": "XTIT",
                "comment": "Application title"
              }
            },
            "subTitle": {
              "description": "Represents a subtitle; to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
              "$ref": "#/$defs/i18n_key_string",
              "i18n": {
                "type": "XTIT",
                "comment": "Application subtitle"
              }
            },
            "shortTitle": {
              "description": "Represents a shorter version of the title; to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
              "$ref": "#/$defs/i18n_key_string",
              "i18n": {
                "type": "XTIT",
                "comment": "Shorter version of the application title"
              }
            },
            "info": {
              "description": "Represents additional information to the title; to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
              "$ref": "#/$defs/i18n_key_string",
              "i18n": {
                "type": "YINF",
                "comment": "Additional information to the application title"
              }
            },
            "displayMode": {
              "description": "Represents the display mode of the tile",
              "type": "string",
              "enum": ["ContentMode", "HeaderMode"],
              "default": "ContentMode"
            },
            "indicatorDataSource": {
              "description": "Represents data source",
              "type": "object",
              "required": ["dataSource", "path"],
              "properties": {
                "dataSource": {
                  "type": "string"
                },
                "path": {
                  "type": "string"
                },
                "refresh": {
                  "description": "Represents refresh interval",
                  "type": "number"
                }
              }
            },
            "deviceTypes": {
              "description": "Represents device types for which application is developed",
              "$ref": "#/$defs/deviceType"
            },
            "signature": {
              "$ref": "#/$defs/signature_def"
            }
          }
        }
      }
    },
    "openSource": {
      "type": "object",
      "additionalProperties": false,
      "required": ["name"],
      "properties": {
        "name": {
          "description": "Represents a name of the open source as appears on the web",
          "type": "string"
        },
        "version": {
          "description": "Represents a version of the open source (if part of app, version must be specified, if part of UI5 dist layer, version is empty)",
          "type": "string"
        },
        "packagedWithMySelf": {
          "description": "Indicates, whether it is part of the app or not",
          "type": "boolean"
        }
      }
    },
    "dataSource": {
      "oneOf": [
        {
          "$ref": "#/$defs/dataSourceEnum"
        },
        {
          "$ref": "#/$defs/dataSourceCustom"
        }
      ]
    },
    "tag": {
      "type": "array",
      "items": {
        "description": "Represents a tag; to make this property language dependent (recommended), use a key in double curly brackets '{{key}}'",
        "$ref": "#/$defs/i18n_key_string"
      },
      "i18n": {
        "type": "XFLD",
        "comment": "Represents a tag"
      }
    },
    "enhanceWithSetting": {
      "oneOf": [
        {
          "additionalProperties": false,
          "required": ["bundleUrl"],
          "properties": {
            "bundleUrl": {
              "description": "Represents property url for model enhancement",
              "type": "string"
            },
            "bundleUrlRelativeTo": {
              "description": "Indicates whether url is relative to component (default) or manifest",
              "type": "string",
              "default": "component",
              "enum": ["manifest", "component"]
            },
            "fallbackLocale": {
              "description": "Represents the fallback locale",
              "type": "string"
            },
            "supportedLocales": {
              "description": "Represents the list of supported locales",
              "type": "array"
            },
            "terminologies": {
              "description": "Represents terminologies with additional properties files",
              "type": "object",
              "additionalProperties": false,
              "patternProperties": {
                "^[a-zA-Z0-9_\\-]*$": {
                  "$ref": "#/$defs/terminologySetting"
                }
              }
            }
          }
        },
        {
          "required": ["bundleName"],
          "additionalProperties": false,
          "properties": {
            "bundleName": {
              "description": "Represents the alternative for bundleUrl",
              "type": "string"
            },
            "fallbackLocale": {
              "description": "Represents the fallback locale",
              "type": "string"
            },
            "supportedLocales": {
              "description": "Represents the list of supported locales",
              "type": "array"
            },
            "terminologies": {
              "description": "Represents terminologies with additional properties files",
              "type": "object",
              "additionalProperties": false,
              "patternProperties": {
                "^[a-zA-Z0-9_\\-]*$": {
                  "$ref": "#/$defs/terminologySetting"
                }
              }
            }
          }
        }
      ]
    },
    "id_def": {
      "type": "string",
      "maxLength": 70
    }
  }
}
